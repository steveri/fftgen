//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /nobackup/steveri/github/fftgen/rtl/fftram.vp
//  Source template: fftram
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter n_butterfly_units 	= 4
// Parameter op_width 	= 64
// Parameter n_fft_points 	= 1024
// Parameter SRAM_TYPE 	= TRUE_2PORT
// Parameter test_mode 	= TEST5
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// Copyright 2013, all rights reserved.
// See below (end of file) for extended copyright information.
//
// ---------------- Begin default Genesis2 parameter summary ----------------
//
// n_butterfly_units (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// n_fft_points (_GENESIS2_INHERITANCE_PRIORITY_) = 0x400
//
// op_width (_GENESIS2_INHERITANCE_PRIORITY_) = 64
//
// SRAM_TYPE (_GENESIS2_INHERITANCE_PRIORITY_) = TRUE_2PORT
//
// test_mode (_GENESIS2_INHERITANCE_PRIORITY_) = TEST5
//
// ---------------- End default Genesis2 parameter summary ----------------

// nunits=4 npoints=1024 nbanks=16 nrows=64



// Generating SRAMs (SRAM000, SRAM001, SRAM002...SRAM015...)

////////////////////////////////////////////////////////////////////////
// module fftram_unq1
//
// Usage: fftram(n_butterfly_units, n_fft_points, op_width, test_mode), where
//
//   n_butterfly_units is the number of butterfly units to build (1,2,4,8,...)
//   n_fft_points can be any power of two greater than 8;
//   op_width is number of bits per FFT data point, e.g. 64 for 32b real + 32b imaginary
//   test_mode tells what kind of FFT test to build and run e.g. "TEST5"

module fftram_unq1
    (
     input logic clk_i

     // in1, in2 addresses from fftram - bank (SRAM) number bnum
     ,input logic [3:0] BFLY0_op1_bnum_i       ,input logic [3:0] BFLY0_op2_bnum_i
     ,input logic [3:0] BFLY1_op1_bnum_i       ,input logic [3:0] BFLY1_op2_bnum_i
     ,input logic [3:0] BFLY2_op1_bnum_i       ,input logic [3:0] BFLY2_op2_bnum_i
     ,input logic [3:0] BFLY3_op1_bnum_i       ,input logic [3:0] BFLY3_op2_bnum_i

     // in1, in2 addresses from fftram - row (index) number rnum
     ,input logic [5:0] BFLY0_op1_rnum_i       ,input logic [5:0] BFLY0_op2_rnum_i
     ,input logic [5:0] BFLY1_op1_rnum_i       ,input logic [5:0] BFLY1_op2_rnum_i
     ,input logic [5:0] BFLY2_op1_rnum_i       ,input logic [5:0] BFLY2_op2_rnum_i
     ,input logic [5:0] BFLY3_op1_rnum_i       ,input logic [5:0] BFLY3_op2_rnum_i

     // Data from fftram to butterfly units: in1, in2
     ,output logic [63:0] BFLY0_in1_data_o       ,output logic [63:0] BFLY0_in2_data_o
     ,output logic [63:0] BFLY1_in1_data_o       ,output logic [63:0] BFLY1_in2_data_o
     ,output logic [63:0] BFLY2_in1_data_o       ,output logic [63:0] BFLY2_in2_data_o
     ,output logic [63:0] BFLY3_in1_data_o       ,output logic [63:0] BFLY3_in2_data_o

     // Data from butterfly units to fftram: out1, out2
     ,input logic [63:0] BFLY0_out1_data_i       ,input logic [63:0] BFLY0_out2_data_i
     ,input logic [63:0] BFLY1_out1_data_i       ,input logic [63:0] BFLY1_out2_data_i
     ,input logic [63:0] BFLY2_out1_data_i       ,input logic [63:0] BFLY2_out2_data_i
     ,input logic [63:0] BFLY3_out1_data_i       ,input logic [63:0] BFLY3_out2_data_i


     ,input logic fft_started
  );

   // BEGIN WIRE DECLARATIONS__________________________________________________

   // Wires to/from SRAMs:
   // 4 butterfly units means we need 4x4 = 16 single-port SRAM's named e.g. {SRAM000, SRAM001,...SRAM015}

   logic [5:0] SRAM000_ix;   logic [63:0] SRAM000_rd_data;   logic [63:0] SRAM000_wr_data;   logic SRAM000_ez;   logic SRAM000_wz;
   logic [5:0] SRAM001_ix;   logic [63:0] SRAM001_rd_data;   logic [63:0] SRAM001_wr_data;   logic SRAM001_ez;   logic SRAM001_wz;
   logic [5:0] SRAM002_ix;   logic [63:0] SRAM002_rd_data;   logic [63:0] SRAM002_wr_data;   logic SRAM002_ez;   logic SRAM002_wz;
   logic [5:0] SRAM003_ix;   logic [63:0] SRAM003_rd_data;   logic [63:0] SRAM003_wr_data;   logic SRAM003_ez;   logic SRAM003_wz;
   logic [5:0] SRAM004_ix;   logic [63:0] SRAM004_rd_data;   logic [63:0] SRAM004_wr_data;   logic SRAM004_ez;   logic SRAM004_wz;
   logic [5:0] SRAM005_ix;   logic [63:0] SRAM005_rd_data;   logic [63:0] SRAM005_wr_data;   logic SRAM005_ez;   logic SRAM005_wz;
   logic [5:0] SRAM006_ix;   logic [63:0] SRAM006_rd_data;   logic [63:0] SRAM006_wr_data;   logic SRAM006_ez;   logic SRAM006_wz;
   logic [5:0] SRAM007_ix;   logic [63:0] SRAM007_rd_data;   logic [63:0] SRAM007_wr_data;   logic SRAM007_ez;   logic SRAM007_wz;
   logic [5:0] SRAM008_ix;   logic [63:0] SRAM008_rd_data;   logic [63:0] SRAM008_wr_data;   logic SRAM008_ez;   logic SRAM008_wz;
   logic [5:0] SRAM009_ix;   logic [63:0] SRAM009_rd_data;   logic [63:0] SRAM009_wr_data;   logic SRAM009_ez;   logic SRAM009_wz;
   logic [5:0] SRAM010_ix;   logic [63:0] SRAM010_rd_data;   logic [63:0] SRAM010_wr_data;   logic SRAM010_ez;   logic SRAM010_wz;
   logic [5:0] SRAM011_ix;   logic [63:0] SRAM011_rd_data;   logic [63:0] SRAM011_wr_data;   logic SRAM011_ez;   logic SRAM011_wz;
   logic [5:0] SRAM012_ix;   logic [63:0] SRAM012_rd_data;   logic [63:0] SRAM012_wr_data;   logic SRAM012_ez;   logic SRAM012_wz;
   logic [5:0] SRAM013_ix;   logic [63:0] SRAM013_rd_data;   logic [63:0] SRAM013_wr_data;   logic SRAM013_ez;   logic SRAM013_wz;
   logic [5:0] SRAM014_ix;   logic [63:0] SRAM014_rd_data;   logic [63:0] SRAM014_wr_data;   logic SRAM014_ez;   logic SRAM014_wz;
   logic [5:0] SRAM015_ix;   logic [63:0] SRAM015_rd_data;   logic [63:0] SRAM015_wr_data;   logic SRAM015_ez;   logic SRAM015_wz;


   // (For now) BOTF: must duplicate fftctl's 'cycle_num' signal so we
   // can conservatively BYPASS ALL FINAL-CYCLE WRITES in a each stage.
   // FIXME Really shouldn't bypass final-stage writes!!!
   // FIXME Later, can just bring 'cycle_num' (below) in from fftctl as a signal.
   // FIXME Or something smarter.
   // Need to count from 0 to [log2(npoints) x (npoints/2) / (nbutts)]
   // plus at least one beyond that.
   logic [10:0] cycle_num;

   // Placeholder for optional BOTF signals, unused in this configuration (SRAM003_active).


   // Placeholder for optional BOTF signals, unused in this configuration.

   // Only needed when bypass buffers are used; otherwise gets hardwired to rd_data.
   logic [63:0] sram_or_buf[0:15]; // Staging area for read data.

   // (op1,op2)_"match" wires TRUE iff (op1,op2) address matches SRAM id ([0], [1], ...)
   // 4 butterfly units means we need 4x4 = 16 single-port SRAM's named e.g. {SRAM000, SRAM001,...SRAM015}
   logic BFLY0_op1_match[0:15];    logic BFLY0_op2_match[0:15];
   logic BFLY1_op1_match[0:15];    logic BFLY1_op2_match[0:15];
   logic BFLY2_op1_match[0:15];    logic BFLY2_op2_match[0:15];
   logic BFLY3_op1_match[0:15];    logic BFLY3_op2_match[0:15];

   // LOOK MA NO BYPASS BUFFER


   // Initialize BOTF (bypass on the fly) signals (cycle_num)
   initial cycle_num = 11'b0;

   // Placeholder for initialization of optional BOTF signals, unused in this configuration.

   // END WIRE DECLARATIONS____________________________________________________


   always @(posedge clk_i) begin
     // FIXME FIXME FIXME OH NO!!! waveform shows this
     //   cycle_num != top_fft cycle_num !! :( :(
     if (fft_started == 1) cycle_num <= cycle_num + 1'b1;
     else cycle_num <= 11'b0;
   end

   // Placeholder for optional BOTF signals, unused in this configuration.

   // Instantiate SRAM's (SRAM000, SRAM001, SRAM002...SRAM015) (.remote(local))
   SRAM_unq1  SRAM000( .clk_i(clk_i), .ez_i(SRAM000_ez), .wz_i(SRAM000_wz), .addr_i(SRAM000_ix), .rd_data_o(SRAM000_rd_data), .wr_data_i(SRAM000_wr_data) );
   SRAM_unq2  SRAM001( .clk_i(clk_i), .ez_i(SRAM001_ez), .wz_i(SRAM001_wz), .addr_i(SRAM001_ix), .rd_data_o(SRAM001_rd_data), .wr_data_i(SRAM001_wr_data) );
   SRAM_unq3  SRAM002( .clk_i(clk_i), .ez_i(SRAM002_ez), .wz_i(SRAM002_wz), .addr_i(SRAM002_ix), .rd_data_o(SRAM002_rd_data), .wr_data_i(SRAM002_wr_data) );
   SRAM_unq4  SRAM003( .clk_i(clk_i), .ez_i(SRAM003_ez), .wz_i(SRAM003_wz), .addr_i(SRAM003_ix), .rd_data_o(SRAM003_rd_data), .wr_data_i(SRAM003_wr_data) );
   SRAM_unq5  SRAM004( .clk_i(clk_i), .ez_i(SRAM004_ez), .wz_i(SRAM004_wz), .addr_i(SRAM004_ix), .rd_data_o(SRAM004_rd_data), .wr_data_i(SRAM004_wr_data) );
   SRAM_unq6  SRAM005( .clk_i(clk_i), .ez_i(SRAM005_ez), .wz_i(SRAM005_wz), .addr_i(SRAM005_ix), .rd_data_o(SRAM005_rd_data), .wr_data_i(SRAM005_wr_data) );
   SRAM_unq7  SRAM006( .clk_i(clk_i), .ez_i(SRAM006_ez), .wz_i(SRAM006_wz), .addr_i(SRAM006_ix), .rd_data_o(SRAM006_rd_data), .wr_data_i(SRAM006_wr_data) );
   SRAM_unq8  SRAM007( .clk_i(clk_i), .ez_i(SRAM007_ez), .wz_i(SRAM007_wz), .addr_i(SRAM007_ix), .rd_data_o(SRAM007_rd_data), .wr_data_i(SRAM007_wr_data) );
   SRAM_unq9  SRAM008( .clk_i(clk_i), .ez_i(SRAM008_ez), .wz_i(SRAM008_wz), .addr_i(SRAM008_ix), .rd_data_o(SRAM008_rd_data), .wr_data_i(SRAM008_wr_data) );
   SRAM_unq10  SRAM009( .clk_i(clk_i), .ez_i(SRAM009_ez), .wz_i(SRAM009_wz), .addr_i(SRAM009_ix), .rd_data_o(SRAM009_rd_data), .wr_data_i(SRAM009_wr_data) );
   SRAM_unq11  SRAM010( .clk_i(clk_i), .ez_i(SRAM010_ez), .wz_i(SRAM010_wz), .addr_i(SRAM010_ix), .rd_data_o(SRAM010_rd_data), .wr_data_i(SRAM010_wr_data) );
   SRAM_unq12  SRAM011( .clk_i(clk_i), .ez_i(SRAM011_ez), .wz_i(SRAM011_wz), .addr_i(SRAM011_ix), .rd_data_o(SRAM011_rd_data), .wr_data_i(SRAM011_wr_data) );
   SRAM_unq13  SRAM012( .clk_i(clk_i), .ez_i(SRAM012_ez), .wz_i(SRAM012_wz), .addr_i(SRAM012_ix), .rd_data_o(SRAM012_rd_data), .wr_data_i(SRAM012_wr_data) );
   SRAM_unq14  SRAM013( .clk_i(clk_i), .ez_i(SRAM013_ez), .wz_i(SRAM013_wz), .addr_i(SRAM013_ix), .rd_data_o(SRAM013_rd_data), .wr_data_i(SRAM013_wr_data) );
   SRAM_unq15  SRAM014( .clk_i(clk_i), .ez_i(SRAM014_ez), .wz_i(SRAM014_wz), .addr_i(SRAM014_ix), .rd_data_o(SRAM014_rd_data), .wr_data_i(SRAM014_wr_data) );
   SRAM_unq16  SRAM015( .clk_i(clk_i), .ez_i(SRAM015_ez), .wz_i(SRAM015_wz), .addr_i(SRAM015_ix), .rd_data_o(SRAM015_rd_data), .wr_data_i(SRAM015_wr_data) );

   //////////////////////////////////////////////////////////////////////////////
   // ez signals for SRAMs
   assign SRAM000_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 0 ) | (BFLY0_op2_bnum_i == 0 ) |
        (BFLY1_op1_bnum_i == 0 ) | (BFLY1_op2_bnum_i == 0 ) |
        (BFLY2_op1_bnum_i == 0 ) | (BFLY2_op2_bnum_i == 0 ) |
        (BFLY3_op1_bnum_i == 0 ) | (BFLY3_op2_bnum_i == 0 ) | ~SRAM000_wz );
   assign SRAM001_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 1 ) | (BFLY0_op2_bnum_i == 1 ) |
        (BFLY1_op1_bnum_i == 1 ) | (BFLY1_op2_bnum_i == 1 ) |
        (BFLY2_op1_bnum_i == 1 ) | (BFLY2_op2_bnum_i == 1 ) |
        (BFLY3_op1_bnum_i == 1 ) | (BFLY3_op2_bnum_i == 1 ) | ~SRAM001_wz );
   assign SRAM002_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 2 ) | (BFLY0_op2_bnum_i == 2 ) |
        (BFLY1_op1_bnum_i == 2 ) | (BFLY1_op2_bnum_i == 2 ) |
        (BFLY2_op1_bnum_i == 2 ) | (BFLY2_op2_bnum_i == 2 ) |
        (BFLY3_op1_bnum_i == 2 ) | (BFLY3_op2_bnum_i == 2 ) | ~SRAM002_wz );
   assign SRAM003_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 3 ) | (BFLY0_op2_bnum_i == 3 ) |
        (BFLY1_op1_bnum_i == 3 ) | (BFLY1_op2_bnum_i == 3 ) |
        (BFLY2_op1_bnum_i == 3 ) | (BFLY2_op2_bnum_i == 3 ) |
        (BFLY3_op1_bnum_i == 3 ) | (BFLY3_op2_bnum_i == 3 ) | ~SRAM003_wz );
   assign SRAM004_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 4 ) | (BFLY0_op2_bnum_i == 4 ) |
        (BFLY1_op1_bnum_i == 4 ) | (BFLY1_op2_bnum_i == 4 ) |
        (BFLY2_op1_bnum_i == 4 ) | (BFLY2_op2_bnum_i == 4 ) |
        (BFLY3_op1_bnum_i == 4 ) | (BFLY3_op2_bnum_i == 4 ) | ~SRAM004_wz );
   assign SRAM005_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 5 ) | (BFLY0_op2_bnum_i == 5 ) |
        (BFLY1_op1_bnum_i == 5 ) | (BFLY1_op2_bnum_i == 5 ) |
        (BFLY2_op1_bnum_i == 5 ) | (BFLY2_op2_bnum_i == 5 ) |
        (BFLY3_op1_bnum_i == 5 ) | (BFLY3_op2_bnum_i == 5 ) | ~SRAM005_wz );
   assign SRAM006_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 6 ) | (BFLY0_op2_bnum_i == 6 ) |
        (BFLY1_op1_bnum_i == 6 ) | (BFLY1_op2_bnum_i == 6 ) |
        (BFLY2_op1_bnum_i == 6 ) | (BFLY2_op2_bnum_i == 6 ) |
        (BFLY3_op1_bnum_i == 6 ) | (BFLY3_op2_bnum_i == 6 ) | ~SRAM006_wz );
   assign SRAM007_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 7 ) | (BFLY0_op2_bnum_i == 7 ) |
        (BFLY1_op1_bnum_i == 7 ) | (BFLY1_op2_bnum_i == 7 ) |
        (BFLY2_op1_bnum_i == 7 ) | (BFLY2_op2_bnum_i == 7 ) |
        (BFLY3_op1_bnum_i == 7 ) | (BFLY3_op2_bnum_i == 7 ) | ~SRAM007_wz );
   assign SRAM008_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 8 ) | (BFLY0_op2_bnum_i == 8 ) |
        (BFLY1_op1_bnum_i == 8 ) | (BFLY1_op2_bnum_i == 8 ) |
        (BFLY2_op1_bnum_i == 8 ) | (BFLY2_op2_bnum_i == 8 ) |
        (BFLY3_op1_bnum_i == 8 ) | (BFLY3_op2_bnum_i == 8 ) | ~SRAM008_wz );
   assign SRAM009_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 9 ) | (BFLY0_op2_bnum_i == 9 ) |
        (BFLY1_op1_bnum_i == 9 ) | (BFLY1_op2_bnum_i == 9 ) |
        (BFLY2_op1_bnum_i == 9 ) | (BFLY2_op2_bnum_i == 9 ) |
        (BFLY3_op1_bnum_i == 9 ) | (BFLY3_op2_bnum_i == 9 ) | ~SRAM009_wz );
   assign SRAM010_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 10 ) | (BFLY0_op2_bnum_i == 10 ) |
        (BFLY1_op1_bnum_i == 10 ) | (BFLY1_op2_bnum_i == 10 ) |
        (BFLY2_op1_bnum_i == 10 ) | (BFLY2_op2_bnum_i == 10 ) |
        (BFLY3_op1_bnum_i == 10 ) | (BFLY3_op2_bnum_i == 10 ) | ~SRAM010_wz );
   assign SRAM011_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 11 ) | (BFLY0_op2_bnum_i == 11 ) |
        (BFLY1_op1_bnum_i == 11 ) | (BFLY1_op2_bnum_i == 11 ) |
        (BFLY2_op1_bnum_i == 11 ) | (BFLY2_op2_bnum_i == 11 ) |
        (BFLY3_op1_bnum_i == 11 ) | (BFLY3_op2_bnum_i == 11 ) | ~SRAM011_wz );
   assign SRAM012_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 12 ) | (BFLY0_op2_bnum_i == 12 ) |
        (BFLY1_op1_bnum_i == 12 ) | (BFLY1_op2_bnum_i == 12 ) |
        (BFLY2_op1_bnum_i == 12 ) | (BFLY2_op2_bnum_i == 12 ) |
        (BFLY3_op1_bnum_i == 12 ) | (BFLY3_op2_bnum_i == 12 ) | ~SRAM012_wz );
   assign SRAM013_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 13 ) | (BFLY0_op2_bnum_i == 13 ) |
        (BFLY1_op1_bnum_i == 13 ) | (BFLY1_op2_bnum_i == 13 ) |
        (BFLY2_op1_bnum_i == 13 ) | (BFLY2_op2_bnum_i == 13 ) |
        (BFLY3_op1_bnum_i == 13 ) | (BFLY3_op2_bnum_i == 13 ) | ~SRAM013_wz );
   assign SRAM014_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 14 ) | (BFLY0_op2_bnum_i == 14 ) |
        (BFLY1_op1_bnum_i == 14 ) | (BFLY1_op2_bnum_i == 14 ) |
        (BFLY2_op1_bnum_i == 14 ) | (BFLY2_op2_bnum_i == 14 ) |
        (BFLY3_op1_bnum_i == 14 ) | (BFLY3_op2_bnum_i == 14 ) | ~SRAM014_wz );
   assign SRAM015_ez = ~fft_started | ~(
        (BFLY0_op1_bnum_i == 15 ) | (BFLY0_op2_bnum_i == 15 ) |
        (BFLY1_op1_bnum_i == 15 ) | (BFLY1_op2_bnum_i == 15 ) |
        (BFLY2_op1_bnum_i == 15 ) | (BFLY2_op2_bnum_i == 15 ) |
        (BFLY3_op1_bnum_i == 15 ) | (BFLY3_op2_bnum_i == 15 ) | ~SRAM015_wz );

   //////////////////////////////////////////////////////////////////////////////
   // Bypass buffer control signals.  Only used for TRUE_1PORT.
   // Otherwise...what...gets eliminated automatically, right?  BUG/FIXME/TODO



   // NOTE also need this if there's no bypass at all e.g. when nports > 1
   // LOOK MA NO BYPASS BUFFER

   // Placeholder for optional BOTF signals, unused in this configuration.


   // LOOK MA NO BYPASS BUFFER mano mano

   //////////////////////////////////////////////////////////////////////////////
   // wz signals.  If Anyone wants to access a given bank n (op1_bnum==1),
   // set wz(n) (to zero), unless suppress_wz says not to.

   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM000_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 0 ) | (BFLY0_op2_bnum_i == 0 ) |
         (BFLY1_op1_bnum_i == 0 ) | (BFLY1_op2_bnum_i == 0 ) |
         (BFLY2_op1_bnum_i == 0 ) | (BFLY2_op2_bnum_i == 0 ) |
         (BFLY3_op1_bnum_i == 0 ) | (BFLY3_op2_bnum_i == 0 )
      )) begin
         SRAM000_wz = clk_i;
      end
      else begin
         SRAM000_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM001_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 1 ) | (BFLY0_op2_bnum_i == 1 ) |
         (BFLY1_op1_bnum_i == 1 ) | (BFLY1_op2_bnum_i == 1 ) |
         (BFLY2_op1_bnum_i == 1 ) | (BFLY2_op2_bnum_i == 1 ) |
         (BFLY3_op1_bnum_i == 1 ) | (BFLY3_op2_bnum_i == 1 )
      )) begin
         SRAM001_wz = clk_i;
      end
      else begin
         SRAM001_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM002_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 2 ) | (BFLY0_op2_bnum_i == 2 ) |
         (BFLY1_op1_bnum_i == 2 ) | (BFLY1_op2_bnum_i == 2 ) |
         (BFLY2_op1_bnum_i == 2 ) | (BFLY2_op2_bnum_i == 2 ) |
         (BFLY3_op1_bnum_i == 2 ) | (BFLY3_op2_bnum_i == 2 )
      )) begin
         SRAM002_wz = clk_i;
      end
      else begin
         SRAM002_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM003_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 3 ) | (BFLY0_op2_bnum_i == 3 ) |
         (BFLY1_op1_bnum_i == 3 ) | (BFLY1_op2_bnum_i == 3 ) |
         (BFLY2_op1_bnum_i == 3 ) | (BFLY2_op2_bnum_i == 3 ) |
         (BFLY3_op1_bnum_i == 3 ) | (BFLY3_op2_bnum_i == 3 )
      )) begin
         SRAM003_wz = clk_i;
      end
      else begin
         SRAM003_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM004_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 4 ) | (BFLY0_op2_bnum_i == 4 ) |
         (BFLY1_op1_bnum_i == 4 ) | (BFLY1_op2_bnum_i == 4 ) |
         (BFLY2_op1_bnum_i == 4 ) | (BFLY2_op2_bnum_i == 4 ) |
         (BFLY3_op1_bnum_i == 4 ) | (BFLY3_op2_bnum_i == 4 )
      )) begin
         SRAM004_wz = clk_i;
      end
      else begin
         SRAM004_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM005_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 5 ) | (BFLY0_op2_bnum_i == 5 ) |
         (BFLY1_op1_bnum_i == 5 ) | (BFLY1_op2_bnum_i == 5 ) |
         (BFLY2_op1_bnum_i == 5 ) | (BFLY2_op2_bnum_i == 5 ) |
         (BFLY3_op1_bnum_i == 5 ) | (BFLY3_op2_bnum_i == 5 )
      )) begin
         SRAM005_wz = clk_i;
      end
      else begin
         SRAM005_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM006_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 6 ) | (BFLY0_op2_bnum_i == 6 ) |
         (BFLY1_op1_bnum_i == 6 ) | (BFLY1_op2_bnum_i == 6 ) |
         (BFLY2_op1_bnum_i == 6 ) | (BFLY2_op2_bnum_i == 6 ) |
         (BFLY3_op1_bnum_i == 6 ) | (BFLY3_op2_bnum_i == 6 )
      )) begin
         SRAM006_wz = clk_i;
      end
      else begin
         SRAM006_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM007_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 7 ) | (BFLY0_op2_bnum_i == 7 ) |
         (BFLY1_op1_bnum_i == 7 ) | (BFLY1_op2_bnum_i == 7 ) |
         (BFLY2_op1_bnum_i == 7 ) | (BFLY2_op2_bnum_i == 7 ) |
         (BFLY3_op1_bnum_i == 7 ) | (BFLY3_op2_bnum_i == 7 )
      )) begin
         SRAM007_wz = clk_i;
      end
      else begin
         SRAM007_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM008_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 8 ) | (BFLY0_op2_bnum_i == 8 ) |
         (BFLY1_op1_bnum_i == 8 ) | (BFLY1_op2_bnum_i == 8 ) |
         (BFLY2_op1_bnum_i == 8 ) | (BFLY2_op2_bnum_i == 8 ) |
         (BFLY3_op1_bnum_i == 8 ) | (BFLY3_op2_bnum_i == 8 )
      )) begin
         SRAM008_wz = clk_i;
      end
      else begin
         SRAM008_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM009_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 9 ) | (BFLY0_op2_bnum_i == 9 ) |
         (BFLY1_op1_bnum_i == 9 ) | (BFLY1_op2_bnum_i == 9 ) |
         (BFLY2_op1_bnum_i == 9 ) | (BFLY2_op2_bnum_i == 9 ) |
         (BFLY3_op1_bnum_i == 9 ) | (BFLY3_op2_bnum_i == 9 )
      )) begin
         SRAM009_wz = clk_i;
      end
      else begin
         SRAM009_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM010_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 10 ) | (BFLY0_op2_bnum_i == 10 ) |
         (BFLY1_op1_bnum_i == 10 ) | (BFLY1_op2_bnum_i == 10 ) |
         (BFLY2_op1_bnum_i == 10 ) | (BFLY2_op2_bnum_i == 10 ) |
         (BFLY3_op1_bnum_i == 10 ) | (BFLY3_op2_bnum_i == 10 )
      )) begin
         SRAM010_wz = clk_i;
      end
      else begin
         SRAM010_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM011_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 11 ) | (BFLY0_op2_bnum_i == 11 ) |
         (BFLY1_op1_bnum_i == 11 ) | (BFLY1_op2_bnum_i == 11 ) |
         (BFLY2_op1_bnum_i == 11 ) | (BFLY2_op2_bnum_i == 11 ) |
         (BFLY3_op1_bnum_i == 11 ) | (BFLY3_op2_bnum_i == 11 )
      )) begin
         SRAM011_wz = clk_i;
      end
      else begin
         SRAM011_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM012_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 12 ) | (BFLY0_op2_bnum_i == 12 ) |
         (BFLY1_op1_bnum_i == 12 ) | (BFLY1_op2_bnum_i == 12 ) |
         (BFLY2_op1_bnum_i == 12 ) | (BFLY2_op2_bnum_i == 12 ) |
         (BFLY3_op1_bnum_i == 12 ) | (BFLY3_op2_bnum_i == 12 )
      )) begin
         SRAM012_wz = clk_i;
      end
      else begin
         SRAM012_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM013_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 13 ) | (BFLY0_op2_bnum_i == 13 ) |
         (BFLY1_op1_bnum_i == 13 ) | (BFLY1_op2_bnum_i == 13 ) |
         (BFLY2_op1_bnum_i == 13 ) | (BFLY2_op2_bnum_i == 13 ) |
         (BFLY3_op1_bnum_i == 13 ) | (BFLY3_op2_bnum_i == 13 )
      )) begin
         SRAM013_wz = clk_i;
      end
      else begin
         SRAM013_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM014_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 14 ) | (BFLY0_op2_bnum_i == 14 ) |
         (BFLY1_op1_bnum_i == 14 ) | (BFLY1_op2_bnum_i == 14 ) |
         (BFLY2_op1_bnum_i == 14 ) | (BFLY2_op2_bnum_i == 14 ) |
         (BFLY3_op1_bnum_i == 14 ) | (BFLY3_op2_bnum_i == 14 )
      )) begin
         SRAM014_wz = clk_i;
      end
      else begin
         SRAM014_wz = 1'b1;
      end
   end
   always @ (clk_i) begin
      if (cycle_num == 11'b0) SRAM015_wz = 1'b1; else
      if ( fft_started & (
         (BFLY0_op1_bnum_i == 15 ) | (BFLY0_op2_bnum_i == 15 ) |
         (BFLY1_op1_bnum_i == 15 ) | (BFLY1_op2_bnum_i == 15 ) |
         (BFLY2_op1_bnum_i == 15 ) | (BFLY2_op2_bnum_i == 15 ) |
         (BFLY3_op1_bnum_i == 15 ) | (BFLY3_op2_bnum_i == 15 )
      )) begin
         SRAM015_wz = clk_i;
      end
      else begin
         SRAM015_wz = 1'b1;
      end
   end

   always @(clk_i) if (fft_started) begin
      $display("");
      $display("fftram %1d: fft_started = %1d", $time, fft_started);
      $display("fftram %1d: BFLY0_op1_bnum_i = %1d", $time, BFLY0_op1_bnum_i);
      $display("");
      $display("fftram %1d: SRAM000_ez = %1d", $time, SRAM000_ez);
      $display("fftram %1d: SRAM001_ez = %1d", $time, SRAM001_ez);
      $display("fftram %1d: SRAM002_ez = %1d", $time, SRAM002_ez);
      $display("fftram %1d: SRAM003_ez = %1d", $time, SRAM003_ez);
      $display("");
      $display("fftram %1d: SRAM000_wz = %1d", $time, SRAM000_wz);
      $display("fftram %1d: SRAM001_wz = %1d", $time, SRAM001_wz);
      $display("fftram %1d: SRAM002_wz = %1d", $time, SRAM002_wz);
      $display("fftram %1d: SRAM003_wz = %1d", $time, SRAM003_wz);
      $display("");
   end

   //////////////////////////////////////////////////////////////////////////////
   // SRAM address (ix) to access.

   // Ugh. vcs version works b/c address is x and it doesn't know where to write bad value
   // and so it doesn't write anything, which is the real desired behavior.
   // Solution is to disable ez and/or wz when value would otherwise be x
   // FIXME/TODO after things are fixed and working, disable the stupid x's!!!

   assign SRAM000_ix = 
        (BFLY0_op1_bnum_i  == 0 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 0 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 0 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 0 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 0 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 0 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 0 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 0 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM001_ix = 
        (BFLY0_op1_bnum_i  == 1 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 1 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 1 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 1 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 1 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 1 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 1 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 1 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM002_ix = 
        (BFLY0_op1_bnum_i  == 2 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 2 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 2 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 2 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 2 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 2 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 2 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 2 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM003_ix = 
        (BFLY0_op1_bnum_i  == 3 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 3 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 3 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 3 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 3 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 3 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 3 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 3 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM004_ix = 
        (BFLY0_op1_bnum_i  == 4 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 4 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 4 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 4 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 4 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 4 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 4 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 4 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM005_ix = 
        (BFLY0_op1_bnum_i  == 5 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 5 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 5 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 5 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 5 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 5 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 5 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 5 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM006_ix = 
        (BFLY0_op1_bnum_i  == 6 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 6 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 6 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 6 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 6 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 6 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 6 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 6 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM007_ix = 
        (BFLY0_op1_bnum_i  == 7 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 7 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 7 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 7 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 7 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 7 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 7 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 7 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM008_ix = 
        (BFLY0_op1_bnum_i  == 8 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 8 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 8 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 8 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 8 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 8 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 8 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 8 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM009_ix = 
        (BFLY0_op1_bnum_i  == 9 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 9 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 9 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 9 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 9 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 9 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 9 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 9 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM010_ix = 
        (BFLY0_op1_bnum_i  == 10 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 10 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 10 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 10 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 10 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 10 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 10 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 10 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM011_ix = 
        (BFLY0_op1_bnum_i  == 11 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 11 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 11 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 11 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 11 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 11 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 11 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 11 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM012_ix = 
        (BFLY0_op1_bnum_i  == 12 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 12 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 12 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 12 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 12 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 12 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 12 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 12 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM013_ix = 
        (BFLY0_op1_bnum_i  == 13 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 13 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 13 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 13 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 13 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 13 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 13 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 13 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM014_ix = 
        (BFLY0_op1_bnum_i  == 14 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 14 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 14 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 14 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 14 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 14 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 14 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 14 ) ? BFLY3_op2_rnum_i : 'x;

   assign SRAM015_ix = 
        (BFLY0_op1_bnum_i  == 15 ) ? BFLY0_op1_rnum_i  : (BFLY0_op2_bnum_i  == 15 ) ? BFLY0_op2_rnum_i :
        (BFLY1_op1_bnum_i  == 15 ) ? BFLY1_op1_rnum_i  : (BFLY1_op2_bnum_i  == 15 ) ? BFLY1_op2_rnum_i :
        (BFLY2_op1_bnum_i  == 15 ) ? BFLY2_op1_rnum_i  : (BFLY2_op2_bnum_i  == 15 ) ? BFLY2_op2_rnum_i :
        (BFLY3_op1_bnum_i  == 15 ) ? BFLY3_op1_rnum_i  : (BFLY3_op2_bnum_i  == 15 ) ? BFLY3_op2_rnum_i : 'x;


   //////////////////////////////////////////////////////////////////////////////
   // op1 match signals
   //
   assign BFLY0_op1_match[ 0] = (BFLY0_op1_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 1] = (BFLY0_op1_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 2] = (BFLY0_op1_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 3] = (BFLY0_op1_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 4] = (BFLY0_op1_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 5] = (BFLY0_op1_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 6] = (BFLY0_op1_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 7] = (BFLY0_op1_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 8] = (BFLY0_op1_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[ 9] = (BFLY0_op1_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[10] = (BFLY0_op1_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[11] = (BFLY0_op1_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[12] = (BFLY0_op1_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[13] = (BFLY0_op1_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[14] = (BFLY0_op1_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY0_op1_match[15] = (BFLY0_op1_bnum_i == 15) ? 1'b1 : 1'b0;

   assign BFLY1_op1_match[ 0] = (BFLY1_op1_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 1] = (BFLY1_op1_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 2] = (BFLY1_op1_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 3] = (BFLY1_op1_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 4] = (BFLY1_op1_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 5] = (BFLY1_op1_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 6] = (BFLY1_op1_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 7] = (BFLY1_op1_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 8] = (BFLY1_op1_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[ 9] = (BFLY1_op1_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[10] = (BFLY1_op1_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[11] = (BFLY1_op1_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[12] = (BFLY1_op1_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[13] = (BFLY1_op1_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[14] = (BFLY1_op1_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY1_op1_match[15] = (BFLY1_op1_bnum_i == 15) ? 1'b1 : 1'b0;

   assign BFLY2_op1_match[ 0] = (BFLY2_op1_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 1] = (BFLY2_op1_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 2] = (BFLY2_op1_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 3] = (BFLY2_op1_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 4] = (BFLY2_op1_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 5] = (BFLY2_op1_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 6] = (BFLY2_op1_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 7] = (BFLY2_op1_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 8] = (BFLY2_op1_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[ 9] = (BFLY2_op1_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[10] = (BFLY2_op1_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[11] = (BFLY2_op1_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[12] = (BFLY2_op1_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[13] = (BFLY2_op1_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[14] = (BFLY2_op1_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY2_op1_match[15] = (BFLY2_op1_bnum_i == 15) ? 1'b1 : 1'b0;

   assign BFLY3_op1_match[ 0] = (BFLY3_op1_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 1] = (BFLY3_op1_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 2] = (BFLY3_op1_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 3] = (BFLY3_op1_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 4] = (BFLY3_op1_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 5] = (BFLY3_op1_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 6] = (BFLY3_op1_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 7] = (BFLY3_op1_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 8] = (BFLY3_op1_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[ 9] = (BFLY3_op1_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[10] = (BFLY3_op1_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[11] = (BFLY3_op1_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[12] = (BFLY3_op1_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[13] = (BFLY3_op1_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[14] = (BFLY3_op1_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY3_op1_match[15] = (BFLY3_op1_bnum_i == 15) ? 1'b1 : 1'b0;


   //////////////////////////////////////////////////////////////////////////////
   // op2 match signals
   //
   assign BFLY0_op2_match[ 0] = (BFLY0_op2_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 1] = (BFLY0_op2_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 2] = (BFLY0_op2_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 3] = (BFLY0_op2_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 4] = (BFLY0_op2_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 5] = (BFLY0_op2_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 6] = (BFLY0_op2_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 7] = (BFLY0_op2_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 8] = (BFLY0_op2_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[ 9] = (BFLY0_op2_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[10] = (BFLY0_op2_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[11] = (BFLY0_op2_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[12] = (BFLY0_op2_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[13] = (BFLY0_op2_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[14] = (BFLY0_op2_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY0_op2_match[15] = (BFLY0_op2_bnum_i == 15) ? 1'b1 : 1'b0;

   assign BFLY1_op2_match[ 0] = (BFLY1_op2_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 1] = (BFLY1_op2_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 2] = (BFLY1_op2_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 3] = (BFLY1_op2_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 4] = (BFLY1_op2_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 5] = (BFLY1_op2_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 6] = (BFLY1_op2_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 7] = (BFLY1_op2_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 8] = (BFLY1_op2_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[ 9] = (BFLY1_op2_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[10] = (BFLY1_op2_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[11] = (BFLY1_op2_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[12] = (BFLY1_op2_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[13] = (BFLY1_op2_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[14] = (BFLY1_op2_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY1_op2_match[15] = (BFLY1_op2_bnum_i == 15) ? 1'b1 : 1'b0;

   assign BFLY2_op2_match[ 0] = (BFLY2_op2_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 1] = (BFLY2_op2_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 2] = (BFLY2_op2_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 3] = (BFLY2_op2_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 4] = (BFLY2_op2_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 5] = (BFLY2_op2_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 6] = (BFLY2_op2_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 7] = (BFLY2_op2_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 8] = (BFLY2_op2_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[ 9] = (BFLY2_op2_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[10] = (BFLY2_op2_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[11] = (BFLY2_op2_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[12] = (BFLY2_op2_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[13] = (BFLY2_op2_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[14] = (BFLY2_op2_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY2_op2_match[15] = (BFLY2_op2_bnum_i == 15) ? 1'b1 : 1'b0;

   assign BFLY3_op2_match[ 0] = (BFLY3_op2_bnum_i ==  0) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 1] = (BFLY3_op2_bnum_i ==  1) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 2] = (BFLY3_op2_bnum_i ==  2) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 3] = (BFLY3_op2_bnum_i ==  3) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 4] = (BFLY3_op2_bnum_i ==  4) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 5] = (BFLY3_op2_bnum_i ==  5) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 6] = (BFLY3_op2_bnum_i ==  6) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 7] = (BFLY3_op2_bnum_i ==  7) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 8] = (BFLY3_op2_bnum_i ==  8) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[ 9] = (BFLY3_op2_bnum_i ==  9) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[10] = (BFLY3_op2_bnum_i == 10) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[11] = (BFLY3_op2_bnum_i == 11) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[12] = (BFLY3_op2_bnum_i == 12) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[13] = (BFLY3_op2_bnum_i == 13) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[14] = (BFLY3_op2_bnum_i == 14) ? 1'b1 : 1'b0;
   assign BFLY3_op2_match[15] = (BFLY3_op2_bnum_i == 15) ? 1'b1 : 1'b0;



   // E.g. assign sram_or_buf[0] = SRAM000_rd_data;
   assign sram_or_buf[ 0] = SRAM000_rd_data;
   assign sram_or_buf[ 1] = SRAM001_rd_data;
   assign sram_or_buf[ 2] = SRAM002_rd_data;
   assign sram_or_buf[ 3] = SRAM003_rd_data;
   assign sram_or_buf[ 4] = SRAM004_rd_data;
   assign sram_or_buf[ 5] = SRAM005_rd_data;
   assign sram_or_buf[ 6] = SRAM006_rd_data;
   assign sram_or_buf[ 7] = SRAM007_rd_data;
   assign sram_or_buf[ 8] = SRAM008_rd_data;
   assign sram_or_buf[ 9] = SRAM009_rd_data;
   assign sram_or_buf[10] = SRAM010_rd_data;
   assign sram_or_buf[11] = SRAM011_rd_data;
   assign sram_or_buf[12] = SRAM012_rd_data;
   assign sram_or_buf[13] = SRAM013_rd_data;
   assign sram_or_buf[14] = SRAM014_rd_data;
   assign sram_or_buf[15] = SRAM015_rd_data;

   //////////////////////////////////////////////////////////////////////////////
   // SRAM data in1 OUT from sram (or bypass buffer) to butterfly unit
   //
   assign BFLY0_in1_data_o =
      BFLY0_op1_match[ 0] ? sram_or_buf[ 0] :
      BFLY0_op1_match[ 1] ? sram_or_buf[ 1] :
      BFLY0_op1_match[ 2] ? sram_or_buf[ 2] :
      BFLY0_op1_match[ 3] ? sram_or_buf[ 3] :
      BFLY0_op1_match[ 4] ? sram_or_buf[ 4] :
      BFLY0_op1_match[ 5] ? sram_or_buf[ 5] :
      BFLY0_op1_match[ 6] ? sram_or_buf[ 6] :
      BFLY0_op1_match[ 7] ? sram_or_buf[ 7] :
      BFLY0_op1_match[ 8] ? sram_or_buf[ 8] :
      BFLY0_op1_match[ 9] ? sram_or_buf[ 9] :
      BFLY0_op1_match[10] ? sram_or_buf[10] :
      BFLY0_op1_match[11] ? sram_or_buf[11] :
      BFLY0_op1_match[12] ? sram_or_buf[12] :
      BFLY0_op1_match[13] ? sram_or_buf[13] :
      BFLY0_op1_match[14] ? sram_or_buf[14] :
      BFLY0_op1_match[15] ? sram_or_buf[15] : 'x;

   assign BFLY1_in1_data_o =
      BFLY1_op1_match[ 0] ? sram_or_buf[ 0] :
      BFLY1_op1_match[ 1] ? sram_or_buf[ 1] :
      BFLY1_op1_match[ 2] ? sram_or_buf[ 2] :
      BFLY1_op1_match[ 3] ? sram_or_buf[ 3] :
      BFLY1_op1_match[ 4] ? sram_or_buf[ 4] :
      BFLY1_op1_match[ 5] ? sram_or_buf[ 5] :
      BFLY1_op1_match[ 6] ? sram_or_buf[ 6] :
      BFLY1_op1_match[ 7] ? sram_or_buf[ 7] :
      BFLY1_op1_match[ 8] ? sram_or_buf[ 8] :
      BFLY1_op1_match[ 9] ? sram_or_buf[ 9] :
      BFLY1_op1_match[10] ? sram_or_buf[10] :
      BFLY1_op1_match[11] ? sram_or_buf[11] :
      BFLY1_op1_match[12] ? sram_or_buf[12] :
      BFLY1_op1_match[13] ? sram_or_buf[13] :
      BFLY1_op1_match[14] ? sram_or_buf[14] :
      BFLY1_op1_match[15] ? sram_or_buf[15] : 'x;

   assign BFLY2_in1_data_o =
      BFLY2_op1_match[ 0] ? sram_or_buf[ 0] :
      BFLY2_op1_match[ 1] ? sram_or_buf[ 1] :
      BFLY2_op1_match[ 2] ? sram_or_buf[ 2] :
      BFLY2_op1_match[ 3] ? sram_or_buf[ 3] :
      BFLY2_op1_match[ 4] ? sram_or_buf[ 4] :
      BFLY2_op1_match[ 5] ? sram_or_buf[ 5] :
      BFLY2_op1_match[ 6] ? sram_or_buf[ 6] :
      BFLY2_op1_match[ 7] ? sram_or_buf[ 7] :
      BFLY2_op1_match[ 8] ? sram_or_buf[ 8] :
      BFLY2_op1_match[ 9] ? sram_or_buf[ 9] :
      BFLY2_op1_match[10] ? sram_or_buf[10] :
      BFLY2_op1_match[11] ? sram_or_buf[11] :
      BFLY2_op1_match[12] ? sram_or_buf[12] :
      BFLY2_op1_match[13] ? sram_or_buf[13] :
      BFLY2_op1_match[14] ? sram_or_buf[14] :
      BFLY2_op1_match[15] ? sram_or_buf[15] : 'x;

   assign BFLY3_in1_data_o =
      BFLY3_op1_match[ 0] ? sram_or_buf[ 0] :
      BFLY3_op1_match[ 1] ? sram_or_buf[ 1] :
      BFLY3_op1_match[ 2] ? sram_or_buf[ 2] :
      BFLY3_op1_match[ 3] ? sram_or_buf[ 3] :
      BFLY3_op1_match[ 4] ? sram_or_buf[ 4] :
      BFLY3_op1_match[ 5] ? sram_or_buf[ 5] :
      BFLY3_op1_match[ 6] ? sram_or_buf[ 6] :
      BFLY3_op1_match[ 7] ? sram_or_buf[ 7] :
      BFLY3_op1_match[ 8] ? sram_or_buf[ 8] :
      BFLY3_op1_match[ 9] ? sram_or_buf[ 9] :
      BFLY3_op1_match[10] ? sram_or_buf[10] :
      BFLY3_op1_match[11] ? sram_or_buf[11] :
      BFLY3_op1_match[12] ? sram_or_buf[12] :
      BFLY3_op1_match[13] ? sram_or_buf[13] :
      BFLY3_op1_match[14] ? sram_or_buf[14] :
      BFLY3_op1_match[15] ? sram_or_buf[15] : 'x;

   //////////////////////////////////////////////////////////////////////////////
   // SRAM data in2 OUT from sram (or bypass buffer) to butterfly unit
   //
   assign BFLY0_in2_data_o =
      BFLY0_op2_match[ 0] ? sram_or_buf[ 0] :
      BFLY0_op2_match[ 1] ? sram_or_buf[ 1] :
      BFLY0_op2_match[ 2] ? sram_or_buf[ 2] :
      BFLY0_op2_match[ 3] ? sram_or_buf[ 3] :
      BFLY0_op2_match[ 4] ? sram_or_buf[ 4] :
      BFLY0_op2_match[ 5] ? sram_or_buf[ 5] :
      BFLY0_op2_match[ 6] ? sram_or_buf[ 6] :
      BFLY0_op2_match[ 7] ? sram_or_buf[ 7] :
      BFLY0_op2_match[ 8] ? sram_or_buf[ 8] :
      BFLY0_op2_match[ 9] ? sram_or_buf[ 9] :
      BFLY0_op2_match[10] ? sram_or_buf[10] :
      BFLY0_op2_match[11] ? sram_or_buf[11] :
      BFLY0_op2_match[12] ? sram_or_buf[12] :
      BFLY0_op2_match[13] ? sram_or_buf[13] :
      BFLY0_op2_match[14] ? sram_or_buf[14] :
      BFLY0_op2_match[15] ? sram_or_buf[15] : 'x;

   assign BFLY1_in2_data_o =
      BFLY1_op2_match[ 0] ? sram_or_buf[ 0] :
      BFLY1_op2_match[ 1] ? sram_or_buf[ 1] :
      BFLY1_op2_match[ 2] ? sram_or_buf[ 2] :
      BFLY1_op2_match[ 3] ? sram_or_buf[ 3] :
      BFLY1_op2_match[ 4] ? sram_or_buf[ 4] :
      BFLY1_op2_match[ 5] ? sram_or_buf[ 5] :
      BFLY1_op2_match[ 6] ? sram_or_buf[ 6] :
      BFLY1_op2_match[ 7] ? sram_or_buf[ 7] :
      BFLY1_op2_match[ 8] ? sram_or_buf[ 8] :
      BFLY1_op2_match[ 9] ? sram_or_buf[ 9] :
      BFLY1_op2_match[10] ? sram_or_buf[10] :
      BFLY1_op2_match[11] ? sram_or_buf[11] :
      BFLY1_op2_match[12] ? sram_or_buf[12] :
      BFLY1_op2_match[13] ? sram_or_buf[13] :
      BFLY1_op2_match[14] ? sram_or_buf[14] :
      BFLY1_op2_match[15] ? sram_or_buf[15] : 'x;

   assign BFLY2_in2_data_o =
      BFLY2_op2_match[ 0] ? sram_or_buf[ 0] :
      BFLY2_op2_match[ 1] ? sram_or_buf[ 1] :
      BFLY2_op2_match[ 2] ? sram_or_buf[ 2] :
      BFLY2_op2_match[ 3] ? sram_or_buf[ 3] :
      BFLY2_op2_match[ 4] ? sram_or_buf[ 4] :
      BFLY2_op2_match[ 5] ? sram_or_buf[ 5] :
      BFLY2_op2_match[ 6] ? sram_or_buf[ 6] :
      BFLY2_op2_match[ 7] ? sram_or_buf[ 7] :
      BFLY2_op2_match[ 8] ? sram_or_buf[ 8] :
      BFLY2_op2_match[ 9] ? sram_or_buf[ 9] :
      BFLY2_op2_match[10] ? sram_or_buf[10] :
      BFLY2_op2_match[11] ? sram_or_buf[11] :
      BFLY2_op2_match[12] ? sram_or_buf[12] :
      BFLY2_op2_match[13] ? sram_or_buf[13] :
      BFLY2_op2_match[14] ? sram_or_buf[14] :
      BFLY2_op2_match[15] ? sram_or_buf[15] : 'x;

   assign BFLY3_in2_data_o =
      BFLY3_op2_match[ 0] ? sram_or_buf[ 0] :
      BFLY3_op2_match[ 1] ? sram_or_buf[ 1] :
      BFLY3_op2_match[ 2] ? sram_or_buf[ 2] :
      BFLY3_op2_match[ 3] ? sram_or_buf[ 3] :
      BFLY3_op2_match[ 4] ? sram_or_buf[ 4] :
      BFLY3_op2_match[ 5] ? sram_or_buf[ 5] :
      BFLY3_op2_match[ 6] ? sram_or_buf[ 6] :
      BFLY3_op2_match[ 7] ? sram_or_buf[ 7] :
      BFLY3_op2_match[ 8] ? sram_or_buf[ 8] :
      BFLY3_op2_match[ 9] ? sram_or_buf[ 9] :
      BFLY3_op2_match[10] ? sram_or_buf[10] :
      BFLY3_op2_match[11] ? sram_or_buf[11] :
      BFLY3_op2_match[12] ? sram_or_buf[12] :
      BFLY3_op2_match[13] ? sram_or_buf[13] :
      BFLY3_op2_match[14] ? sram_or_buf[14] :
      BFLY3_op2_match[15] ? sram_or_buf[15] : 'x;


   //////////////////////////////////////////////////////////////////////////////
   // SRAM data (out1,out2) IN to sram (or bypass buffer) from butterfly unit

   assign SRAM000_wr_data =
        BFLY0_op1_match[0] ? BFLY0_out1_data_i : BFLY0_op2_match[0] ? BFLY0_out2_data_i :
        BFLY1_op1_match[0] ? BFLY1_out1_data_i : BFLY1_op2_match[0] ? BFLY1_out2_data_i :
        BFLY2_op1_match[0] ? BFLY2_out1_data_i : BFLY2_op2_match[0] ? BFLY2_out2_data_i :
        BFLY3_op1_match[0] ? BFLY3_out1_data_i : BFLY3_op2_match[0] ? BFLY3_out2_data_i : 'x;
   assign SRAM001_wr_data =
        BFLY0_op1_match[1] ? BFLY0_out1_data_i : BFLY0_op2_match[1] ? BFLY0_out2_data_i :
        BFLY1_op1_match[1] ? BFLY1_out1_data_i : BFLY1_op2_match[1] ? BFLY1_out2_data_i :
        BFLY2_op1_match[1] ? BFLY2_out1_data_i : BFLY2_op2_match[1] ? BFLY2_out2_data_i :
        BFLY3_op1_match[1] ? BFLY3_out1_data_i : BFLY3_op2_match[1] ? BFLY3_out2_data_i : 'x;
   assign SRAM002_wr_data =
        BFLY0_op1_match[2] ? BFLY0_out1_data_i : BFLY0_op2_match[2] ? BFLY0_out2_data_i :
        BFLY1_op1_match[2] ? BFLY1_out1_data_i : BFLY1_op2_match[2] ? BFLY1_out2_data_i :
        BFLY2_op1_match[2] ? BFLY2_out1_data_i : BFLY2_op2_match[2] ? BFLY2_out2_data_i :
        BFLY3_op1_match[2] ? BFLY3_out1_data_i : BFLY3_op2_match[2] ? BFLY3_out2_data_i : 'x;
   assign SRAM003_wr_data =
        BFLY0_op1_match[3] ? BFLY0_out1_data_i : BFLY0_op2_match[3] ? BFLY0_out2_data_i :
        BFLY1_op1_match[3] ? BFLY1_out1_data_i : BFLY1_op2_match[3] ? BFLY1_out2_data_i :
        BFLY2_op1_match[3] ? BFLY2_out1_data_i : BFLY2_op2_match[3] ? BFLY2_out2_data_i :
        BFLY3_op1_match[3] ? BFLY3_out1_data_i : BFLY3_op2_match[3] ? BFLY3_out2_data_i : 'x;
   assign SRAM004_wr_data =
        BFLY0_op1_match[4] ? BFLY0_out1_data_i : BFLY0_op2_match[4] ? BFLY0_out2_data_i :
        BFLY1_op1_match[4] ? BFLY1_out1_data_i : BFLY1_op2_match[4] ? BFLY1_out2_data_i :
        BFLY2_op1_match[4] ? BFLY2_out1_data_i : BFLY2_op2_match[4] ? BFLY2_out2_data_i :
        BFLY3_op1_match[4] ? BFLY3_out1_data_i : BFLY3_op2_match[4] ? BFLY3_out2_data_i : 'x;
   assign SRAM005_wr_data =
        BFLY0_op1_match[5] ? BFLY0_out1_data_i : BFLY0_op2_match[5] ? BFLY0_out2_data_i :
        BFLY1_op1_match[5] ? BFLY1_out1_data_i : BFLY1_op2_match[5] ? BFLY1_out2_data_i :
        BFLY2_op1_match[5] ? BFLY2_out1_data_i : BFLY2_op2_match[5] ? BFLY2_out2_data_i :
        BFLY3_op1_match[5] ? BFLY3_out1_data_i : BFLY3_op2_match[5] ? BFLY3_out2_data_i : 'x;
   assign SRAM006_wr_data =
        BFLY0_op1_match[6] ? BFLY0_out1_data_i : BFLY0_op2_match[6] ? BFLY0_out2_data_i :
        BFLY1_op1_match[6] ? BFLY1_out1_data_i : BFLY1_op2_match[6] ? BFLY1_out2_data_i :
        BFLY2_op1_match[6] ? BFLY2_out1_data_i : BFLY2_op2_match[6] ? BFLY2_out2_data_i :
        BFLY3_op1_match[6] ? BFLY3_out1_data_i : BFLY3_op2_match[6] ? BFLY3_out2_data_i : 'x;
   assign SRAM007_wr_data =
        BFLY0_op1_match[7] ? BFLY0_out1_data_i : BFLY0_op2_match[7] ? BFLY0_out2_data_i :
        BFLY1_op1_match[7] ? BFLY1_out1_data_i : BFLY1_op2_match[7] ? BFLY1_out2_data_i :
        BFLY2_op1_match[7] ? BFLY2_out1_data_i : BFLY2_op2_match[7] ? BFLY2_out2_data_i :
        BFLY3_op1_match[7] ? BFLY3_out1_data_i : BFLY3_op2_match[7] ? BFLY3_out2_data_i : 'x;
   assign SRAM008_wr_data =
        BFLY0_op1_match[8] ? BFLY0_out1_data_i : BFLY0_op2_match[8] ? BFLY0_out2_data_i :
        BFLY1_op1_match[8] ? BFLY1_out1_data_i : BFLY1_op2_match[8] ? BFLY1_out2_data_i :
        BFLY2_op1_match[8] ? BFLY2_out1_data_i : BFLY2_op2_match[8] ? BFLY2_out2_data_i :
        BFLY3_op1_match[8] ? BFLY3_out1_data_i : BFLY3_op2_match[8] ? BFLY3_out2_data_i : 'x;
   assign SRAM009_wr_data =
        BFLY0_op1_match[9] ? BFLY0_out1_data_i : BFLY0_op2_match[9] ? BFLY0_out2_data_i :
        BFLY1_op1_match[9] ? BFLY1_out1_data_i : BFLY1_op2_match[9] ? BFLY1_out2_data_i :
        BFLY2_op1_match[9] ? BFLY2_out1_data_i : BFLY2_op2_match[9] ? BFLY2_out2_data_i :
        BFLY3_op1_match[9] ? BFLY3_out1_data_i : BFLY3_op2_match[9] ? BFLY3_out2_data_i : 'x;
   assign SRAM010_wr_data =
        BFLY0_op1_match[10] ? BFLY0_out1_data_i : BFLY0_op2_match[10] ? BFLY0_out2_data_i :
        BFLY1_op1_match[10] ? BFLY1_out1_data_i : BFLY1_op2_match[10] ? BFLY1_out2_data_i :
        BFLY2_op1_match[10] ? BFLY2_out1_data_i : BFLY2_op2_match[10] ? BFLY2_out2_data_i :
        BFLY3_op1_match[10] ? BFLY3_out1_data_i : BFLY3_op2_match[10] ? BFLY3_out2_data_i : 'x;
   assign SRAM011_wr_data =
        BFLY0_op1_match[11] ? BFLY0_out1_data_i : BFLY0_op2_match[11] ? BFLY0_out2_data_i :
        BFLY1_op1_match[11] ? BFLY1_out1_data_i : BFLY1_op2_match[11] ? BFLY1_out2_data_i :
        BFLY2_op1_match[11] ? BFLY2_out1_data_i : BFLY2_op2_match[11] ? BFLY2_out2_data_i :
        BFLY3_op1_match[11] ? BFLY3_out1_data_i : BFLY3_op2_match[11] ? BFLY3_out2_data_i : 'x;
   assign SRAM012_wr_data =
        BFLY0_op1_match[12] ? BFLY0_out1_data_i : BFLY0_op2_match[12] ? BFLY0_out2_data_i :
        BFLY1_op1_match[12] ? BFLY1_out1_data_i : BFLY1_op2_match[12] ? BFLY1_out2_data_i :
        BFLY2_op1_match[12] ? BFLY2_out1_data_i : BFLY2_op2_match[12] ? BFLY2_out2_data_i :
        BFLY3_op1_match[12] ? BFLY3_out1_data_i : BFLY3_op2_match[12] ? BFLY3_out2_data_i : 'x;
   assign SRAM013_wr_data =
        BFLY0_op1_match[13] ? BFLY0_out1_data_i : BFLY0_op2_match[13] ? BFLY0_out2_data_i :
        BFLY1_op1_match[13] ? BFLY1_out1_data_i : BFLY1_op2_match[13] ? BFLY1_out2_data_i :
        BFLY2_op1_match[13] ? BFLY2_out1_data_i : BFLY2_op2_match[13] ? BFLY2_out2_data_i :
        BFLY3_op1_match[13] ? BFLY3_out1_data_i : BFLY3_op2_match[13] ? BFLY3_out2_data_i : 'x;
   assign SRAM014_wr_data =
        BFLY0_op1_match[14] ? BFLY0_out1_data_i : BFLY0_op2_match[14] ? BFLY0_out2_data_i :
        BFLY1_op1_match[14] ? BFLY1_out1_data_i : BFLY1_op2_match[14] ? BFLY1_out2_data_i :
        BFLY2_op1_match[14] ? BFLY2_out1_data_i : BFLY2_op2_match[14] ? BFLY2_out2_data_i :
        BFLY3_op1_match[14] ? BFLY3_out1_data_i : BFLY3_op2_match[14] ? BFLY3_out2_data_i : 'x;
   assign SRAM015_wr_data =
        BFLY0_op1_match[15] ? BFLY0_out1_data_i : BFLY0_op2_match[15] ? BFLY0_out2_data_i :
        BFLY1_op1_match[15] ? BFLY1_out1_data_i : BFLY1_op2_match[15] ? BFLY1_out2_data_i :
        BFLY2_op1_match[15] ? BFLY2_out1_data_i : BFLY2_op2_match[15] ? BFLY2_out2_data_i :
        BFLY3_op1_match[15] ? BFLY3_out1_data_i : BFLY3_op2_match[15] ? BFLY3_out2_data_i : 'x;

   always @(posedge clk_i) begin
      // Along for the ride...
      $display("");
      $display("fftram %1d: BFLY0_op1_match[0] = %1d", $time, BFLY0_op1_match[0]);
      $display("fftram %1d: BFLY0_out1_data_i = %16x", $time, BFLY0_out1_data_i);
      $display("");
   end
                                
   // Placeholder for optional BOTF signals, unused in this configuration.

endmodule


/////////////////////////////////////////////////////////////////////////////////
// MIT License
// 
// Copyright (c) 2013 Stephen E. Richardson and Stanford University
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
// PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-
// TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// 
// For more information please contact
// Stephen E. Richardson  steveri@stanford.edu (Stanford University)
// Prof. Mark Horowitz   horowitz@stanford.edu (Stanford University)
/////////////////////////////////////////////////////////////////////////////////
