##### FLAGS FOR SYNOPSYS DC-SHELL #####
#######################################
VT 		?= svt
VOLTAGE 	?= 1v0
IO2CORE 	?= 30
SYN_CLK_PERIOD 	?= 1.5
SYN_CLK_PERIOD_PS = $(strip $(shell echo $(SYN_CLK_PERIOD)*1000 | bc ))
TARGET_DELAY 	?= $(SYN_CLK_PERIOD_PS)
SMART_RETIMING 	?= 0
CLK_GATING 	?= 1
USE_SAIF	?= 1
USE_GATE_SAIF	?= 1
USE_ICC_GATE_SAIF ?= $(USE_GATE_SAIF)
# flags for dc/icc
DESIGN_TARGET	= $(FPPRODUCT)
SYNTH_DIR_NAME 	:= syn_$(VT)_$(VOLTAGE)_$(TARGET_DELAY)
ifdef APPENDIX
  SYNTH_DIR_NAME 	:= $(SYNTH_DIR_NAME)_$(APPENDIX)
endif
SYNTH_HOME	= $(DESIGN_HOME)/synthesis
SYNTH_RUNDIR	= $(RUNDIR)/synthesis/$(SYNTH_DIR_NAME)
SYNTH_SAIF	= $(SYNTH_RUNDIR)/SAIF
SYNTH_LOGS	= $(SYNTH_RUNDIR)/log
DC_NETLIST	= $(DESIGN_TARGET).${VT}_${VOLTAGE}.$(TARGET_DELAY).mapped.v
ICC_NETLIST	= $(DESIGN_TARGET).${VT}_${VOLTAGE}.$(TARGET_DELAY).routed.v
ICC_OPT_NETLIST = $(DESIGN_TARGET).${VT}_${VOLTAGE}_optimized.$(TARGET_DELAY).routed.v
DC_LOG	= $(SYNTH_LOGS)/dc.log
DC_NOTOPO_LOG = $(SYNTH_LOGS)/dc_notopo.log
DC_PWR_LOG = $(SYNTH_LOGS)/pwr_dc.log 
DC_SIMV	= $(SYNTH_SAIF)/dc_simv


SET_SYNTH_PARAMS = 	set DESIGN_HOME $(DESIGN_HOME); 	\
			set RUNDIR $(RUNDIR); 			\
			set DESIGN_TARGET $(DESIGN_TARGET); 	\
			set VT  $(VT); 				\
			set Voltage $(VOLTAGE); 		\
			set target_delay $(TARGET_DELAY); 	\
			set io2core $(IO2CORE);  		\
			set SmartRetiming $(SMART_RETIMING);  	\
			set EnableClockGating $(CLK_GATING);    \
			set USE_GATE_SAIF $(USE_GATE_SAIF);     \
			set USE_ICC_GATE_SAIF $(USE_ICC_GATE_SAIF); \
                        set DC_NETLIST $(DC_NETLIST);		\
                        set ICC_NETLIST $(ICC_NETLIST);		\
                        set ICC_OPT_NETLIST $(ICC_OPT_NETLIST);


DC_COMMAND_STRING = "$(SET_SYNTH_PARAMS) source -echo -verbose $(SYNTH_HOME)/multiplier_dc.tcl"
DC_PWR_COMMAND_STRING= "$(SET_SYNTH_PARAMS) source -echo -verbose $(SYNTH_HOME)/report_power_dc.tcl"

## Additional Flags for ICC
ICC_LOG 		:= $(SYNTH_LOGS)/icc.log
ICC_PWR_LOG 		:= $(SYNTH_LOGS)/pwr_icc.log
ICC_SIMV 		:= $(SYNTH_SAIF)/icc_simv

ICC_OPT_LOG 		:= $(SYNTH_LOGS)/icc_opt.log
ICC_OPT_PWR_LOG 	:= $(SYNTH_LOGS)/pwr_icc_opt.log
ICC_OPT_SIMV 		:= $(SYNTH_SAIF)/icc_opt_simv

ICC_COMMAND_STRING = "$(SET_SYNTH_PARAMS)  source -echo -verbose $(SYNTH_HOME)/multiplier_icc.tcl"
ICC_PWR_COMMAND_STRING= "$(SET_SYNTH_PARAMS) source -echo -verbose $(SYNTH_HOME)/report_power_icc.tcl"

ICC_OPT_COMMAND_STRING = "set ENABLE_MANUAL_PLACEMENT 1; $(SET_SYNTH_PARAMS)  source -echo -verbose $(SYNTH_HOME)/multiplier_icc.tcl"
ICC_OPT_PWR_COMMAND_STRING = "set ENABLE_MANUAL_PLACEMENT 1; $(SET_SYNTH_PARAMS)  source -echo -verbose $(SYNTH_HOME)/report_power_icc.tcl"



# For activity factor extraction (SAIF)
SAIF_FILE 	= $(SYNTH_RUNDIR)/$(FPPRODUCT).saif
DC_ADD_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).dc.add.saif
DC_MUL_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).dc.mul.saif
DC_AVG_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).dc.avg.saif
DC_MULADD_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).dc.muladd.saif
ICC_ADD_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).icc.add.saif
ICC_MUL_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).icc.mul.saif
ICC_AVG_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).icc.avg.saif
ICC_MULADD_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).icc.muladd.saif
ICC_OPT_ADD_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).icc_opt.add.saif
ICC_OPT_MUL_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).icc_opt.mul.saif
ICC_OPT_AVG_SAIF_FILE	= $(SYNTH_SAIF)/$(FPPRODUCT).icc_opt.avg.saif
ICC_OPT_MULADD_SAIF_FILE= $(SYNTH_SAIF)/$(FPPRODUCT).icc_opt.muladd.saif


# No saif dependency if not USE_SAIF
ifneq ($(USE_SAIF),0)
  SAIF_DEPENDENCY = $(SAIF_FILE)
endif

ifneq ($(USE_GATE_SAIF),0)
  DC_SAIF_DEPENDENCY = $(DC_AVG_SAIF_FILE) $(DC_MULADD_SAIF_FILE) $(DC_MUL_SAIF_FILE) $(DC_ADD_SAIF_FILE)
endif

ifneq ($(USE_ICC_GATE_SAIF),0)
  ICC_SAIF_DEPENDENCY = $(ICC_AVG_SAIF_FILE) $(ICC_MULADD_SAIF_FILE) $(ICC_MUL_SAIF_FILE) $(ICC_ADD_SAIF_FILE)
  ICC_OPT_SAIF_DEPENDENCY = $(ICC_OPT_AVG_SAIF_FILE) $(ICC_OPT_MULADD_SAIF_FILE) $(ICC_OPT_MUL_SAIF_FILE) $(ICC_OPT_ADD_SAIF_FILE)
endif


# Each one of the following weights control the relative frequency of that type of fp number generated. 
# Except for 'SignIsPos' which is percent positive numbers, the weights are relative to 
# one another, not to any absolute number.
SAIF_RUNTIME_ARGS:= 	+SAIF +clk_period=$(SYN_CLK_PERIOD_PS)	\
			+NumTrans=1000				\
			+Silent					\
			+SignIsPos_DistWeight=50		\
			+Zero_DistWeight=10	 		\
			+Denorm100_DistWeight=1			\
			+DenormFFF_DistWeight=1			\
			+Denorm001_DistWeight=1			\
			+DenormRnd_DistWeight=1			\
			+QuietNaN_DistWeight=1			\
			+SignalingNaN_DistWeight=1		\
			+Min_DistWeight=1			\
			+Max_DistWeight=1			\
			+Inf_DistWeight=1			\
			+One_DistWeight=10			\
			+PointOneOneOne_DistWeight=1		\
			+EzAndSml_DistWeight=1			\
			+Random_DistWeight=200

######## END OF FLAGS FOR SYNOPSYS DC-SHELL #####

# DC & ICC Run rules:
############################
$(SAIF_FILE): $(SIMV)
	@echo ""
	@echo Now Running simv for RTL level SAIF extraction: Making $@ because of $?
	@echo ==================================================
	@if test ! -d "$(SYNTH_RUNDIR)"; then 					\
		mkdir -p $(SYNTH_RUNDIR);					\
	fi
	cd $(SYNTH_RUNDIR); 							\
	$(SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) $(RUN) -l $(SIMV).rtl_saif.log


# Design Compiler rules:
.PHONY: force_dc run_dc dc_clean run_dc_notopo

force_dc: dc_clean run_dc
run_dc: $(DC_PWR_LOG)

run_dc_notopo: $(DC_NOTOPO_LOG)


$(DC_NOTOPO_LOG): $(SAIF_DEPENDENCY) $(GENESIS_SYNTH_LIST) $(SYNTH_HOME)/multiplier_dc.tcl
	@echo ""
	@echo Now Running DC SHELL w/o topo: Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_LOGS)"; then 					\
		mkdir -p $(SYNTH_LOGS);						\
	fi
	@echo "Host: `hostname -A`" > $(SYNTH_RUNDIR)/run_dc_notopo.stats
	@echo "Start: `date`" >> $(SYNTH_RUNDIR)/run_dc_notopo.stats
	cd $(SYNTH_RUNDIR); dc_shell-xg-t -64bit -x $(DC_COMMAND_STRING) 2>&1 | tee -i $(DC_NOTOPO_LOG)
	@echo "Finish: `date`" >> $(SYNTH_RUNDIR)/run_dc_notopo.stats
	perl $(DESIGN_HOME)/scripts/checkRun.pl $(DC_NOTOPO_LOG)



$(DC_LOG): $(SAIF_DEPENDENCY) $(GENESIS_SYNTH_LIST) $(SYNTH_HOME)/multiplier_dc.tcl
	@echo ""
	@echo Now Running DC SHELL: Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_LOGS)"; then 					\
		mkdir -p $(SYNTH_LOGS);						\
	fi
	@echo "Host: `hostname -A`" > $(SYNTH_RUNDIR)/run_dc.stats
	@echo "Start: `date`" >> $(SYNTH_RUNDIR)/run_dc.stats
	cd $(SYNTH_RUNDIR); dc_shell-xg-t -64bit -topo -x $(DC_COMMAND_STRING) 2>&1 | tee -i $(DC_LOG)
	@echo "Finish: `date`" >> $(SYNTH_RUNDIR)/run_dc.stats
	perl $(DESIGN_HOME)/scripts/checkRun.pl $(DC_LOG)

$(DC_SIMV): $(DC_LOG)
	@echo ""
	@echo Now Compiling Gate Level SAIF testbench : Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_SAIF)"; then 					\
		mkdir -p $(SYNTH_SAIF);						\
	fi
	cd $(SYNTH_SAIF);								\
	if test ! -d "genesis_verif"; then ln -sf $(RUNDIR)/genesis_verif; fi;		\
	if test ! -d "genesis_synth"; then ln -sf $(RUNDIR)/genesis_synth; fi;		\
	vcs $(VERILOG_COMPILE_FLAGS) $(VERILOG_GATE_LIBS) $(SYNTH_SAIF)/$(DC_NETLIST)   \
	    -f $(RUNDIR)/$(GENESIS_VERIF_LIST) -o $(DC_SIMV) $(COMP) 2>&1 | tee comp_dc_bb.log


$(DC_AVG_SAIF_FILE) $(DC_ADD_SAIF_FILE) $(DC_MUL_SAIF_FILE) $(DC_MULADD_SAIF_FILE): $(DC_SIMV)
	@echo ""
	@echo Now Running dc_simv for gate level SAIF extraction: Making $@ because of $?
	@echo ==============================================================
	@sleep 1;
	cd $(SYNTH_SAIF);					 			\
	$(DC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=30 	\
	     +AddWeight=40 $(RUN) -l $(DC_SIMV).avg_saif.log;				\
	mv $(FPPRODUCT).saif $(FPPRODUCT).dc.avg.saif;					\
	$(DC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=0 	\
	     +AddWeight=100 $(RUN) -l $(DC_SIMV).add_saif.log;				\
	mv $(FPPRODUCT).saif $(FPPRODUCT).dc.add.saif;					\
	$(DC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=100 	\
	     +AddWeight=0 $(RUN) -l $(DC_SIMV).mul_saif.log;				\
	mv $(FPPRODUCT).saif $(FPPRODUCT).dc.mul.saif;					\
	$(DC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=0 	\
	     +AddWeight=0 $(RUN) -l $(DC_SIMV).muladd_saif.log;				\
	mv $(FPPRODUCT).saif $(FPPRODUCT).dc.muladd.saif;


$(DC_PWR_LOG): $(DC_SAIF_DEPENDENCY) $(DC_LOG) $(SYNTH_HOME)/report_power_dc.tcl
	@echo ""
	@echo Now Running DC SHELL: Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_LOGS)"; then 	\
		mkdir -p $(SYNTH_LOGS);		\
	fi
	cd $(SYNTH_RUNDIR);	 							\
	dc_shell-xg-t -64bit -topo -x $(DC_PWR_COMMAND_STRING) 2>&1 | tee -i $(DC_PWR_LOG)
	@perl $(DESIGN_HOME)/scripts/checkRun.pl $(DC_PWR_LOG)

dc_clean:
	@echo ""
	@echo Removing previous DC run log
	@echo =============================================
	\rm -f $(DC_LOG) $(DC_PWR_LOG) $(SYNTH_RUNDIR)/${DESIGN_TARGET}.${VT}_${VOLTAGE}.${TARGET_DELAY}.mapped*

# IC Compiler rules:
.PHONY: force_icc run_icc icc_clean
.PHONY: force_icc_opt run_icc_opt icc_opt_clean

force_icc: icc_clean run_icc
run_icc: $(ICC_PWR_LOG)
force_icc_opt: icc_opt_clean run_icc_opt
run_icc_opt: $(ICC_OPT_PWR_LOG)

$(ICC_LOG): $(DC_PWR_LOG) $(GENESIS_SYNTH_LIST) $(SYNTH_HOME)/multiplier_icc.tcl
	@echo ""
	@echo Now Running IC Compiler: Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_LOGS)"; then 	\
		mkdir -p $(SYNTH_LOGS);		\
	fi
	@echo "Host: `hostname -A`" > $(SYNTH_RUNDIR)/run_icc.stats
	@echo "Start: `date`" >> $(SYNTH_RUNDIR)/run_icc.stats
	cd $(SYNTH_RUNDIR); icc_shell -64bit -x $(ICC_COMMAND_STRING) 2>&1 | tee -i $(ICC_LOG)	
	@echo "Finish: `date`" >> $(SYNTH_RUNDIR)/run_icc.stats
#	@perl $(DESIGN_HOME)/scripts/checkRun.pl $(ICC_LOG)

$(ICC_SIMV): $(ICC_LOG)
	@echo ""
	@echo Now Compiling Gate Level SAIF testbench : Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_SAIF)"; then 	\
		mkdir -p $(SYNTH_SAIF);		\
	fi
	cd $(SYNTH_SAIF);								\
	if test ! -d "genesis_verif"; then ln -sf $(RUNDIR)/genesis_verif; fi;		\
	if test ! -d "genesis_synth"; then ln -sf $(RUNDIR)/genesis_synth; fi;		\
	vcs $(VERILOG_COMPILE_FLAGS) $(VERILOG_GATE_LIBS) $(SYNTH_SAIF)/$(ICC_NETLIST) 	\
	    -f $(RUNDIR)/$(GENESIS_VERIF_LIST) -o $(ICC_SIMV) $(COMP) 2>&1 | tee comp_icc_bb.log


$(ICC_AVG_SAIF_FILE) $(ICC_ADD_SAIF_FILE) $(ICC_MUL_SAIF_FILE) $(ICC_MULADD_SAIF_FILE): $(ICC_SIMV)
	@echo ""
	@echo Now Running icc_simv for gate level SAIF extraction: Making $@ because of $?
	@echo ==============================================================
	@sleep 1;
	cd $(SYNTH_SAIF); 								\
	$(ICC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=30 	\
	      +AddWeight=40 +IgnoreErrors $(RUN) -l $(ICC_SIMV).avg_saif.log;		\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.avg.saif;					\
	$(ICC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=0 	\
	      +AddWeight=100 +IgnoreErrors $(RUN) -l $(ICC_SIMV).add_saif.log;		\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.add.saif;					\
	$(ICC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=100 	\
	      +AddWeight=0 +IgnoreErrors $(RUN) -l $(ICC_SIMV).mul_saif.log;		\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.mul.saif;					\
	$(ICC_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=0 	\
	      +AddWeight=0 +IgnoreErrors $(RUN) -l $(ICC_SIMV).muladd_saif.log;		\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.muladd.saif;


$(ICC_PWR_LOG): $(ICC_SAIF_DEPENDENCY) $(ICC_LOG) $(SYNTH_HOME)/report_power_icc.tcl
	@echo ""
	@echo Now Running ICC SHELL: Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_LOGS)"; then 	\
		mkdir -p $(SYNTH_LOGS);		\
	fi
	cd $(SYNTH_RUNDIR); 								\
	icc_shell -64bit -x $(ICC_PWR_COMMAND_STRING) 2>&1 | tee -i $(ICC_PWR_LOG)
	@perl $(DESIGN_HOME)/scripts/checkRun.pl $(ICC_PWR_LOG)


icc_clean:
	@echo ""
	@echo Removing previous ICC run log
	@echo =============================================
	\rm -f $(ICC_LOG)

$(ICC_OPT_LOG): $(SAIF_DEPENDENCY) $(DC_PWR_LOG) $(GENESIS_SYNTH_LIST) $(SYNTH_HOME)/multiplier_icc.tcl
	@echo ""
	@echo Now Running IC Compiler OPT: Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_LOGS)"; then 	\
		mkdir -p $(SYNTH_LOGS);		\
	fi
	@echo "Host: `hostname -A`" > $(SYNTH_RUNDIR)/run_icc_opt.stats
	@echo "Start: `date`" >> $(SYNTH_RUNDIR)/run_icc_opt.stats
	cd $(SYNTH_RUNDIR); icc_shell -64bit -x $(ICC_OPT_COMMAND_STRING) 2>&1 | tee -i $(ICC_OPT_LOG)
	@echo "Finish: `date`" >> $(SYNTH_RUNDIR)/run_icc_opt.stats
#	@perl $(DESIGN_HOME)/scripts/checkRun.pl $(ICC_OPT_LOG)

$(ICC_OPT_SIMV): $(ICC_OPT_LOG)
	@echo ""
	@echo Now Compiling Gate Level optimized ICC SAIF testbench : Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_SAIF)"; then 	\
		mkdir -p $(SYNTH_SAIF);		\
	fi
	cd $(SYNTH_SAIF);								\
	if test ! -d "genesis_verif"; then ln -sf $(RUNDIR)/genesis_verif; fi;		\
	if test ! -d "genesis_synth"; then ln -sf $(RUNDIR)/genesis_synth; fi;		\
	vcs $(VERILOG_COMPILE_FLAGS) $(VERILOG_GATE_LIBS) $(SYNTH_SAIF)/$(ICC_OPT_NETLIST) 	\
	    -f $(RUNDIR)/$(GENESIS_VERIF_LIST) -o $(ICC_OPT_SIMV) $(COMP) 2>&1 | tee comp_icc_bb.log

$(ICC_OPT_AVG_SAIF_FILE) $(ICC_OPT_ADD_SAIF_FILE) $(ICC_OPT_MUL_SAIF_FILE) $(ICC_OPT_MULADD_SAIF_FILE): $(ICC_OPT_SIMV)
	@echo ""
	@echo Now Running icc_opt_simv for gate level SAIF extraction: Making $@ because of $?
	@echo ==============================================================
	@sleep 1;
	cd $(SYNTH_SAIF); 								\
	$(ICC_OPT_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=30 	\
	      +AddWeight=40 +IgnoreErrors $(RUN) -l $(ICC_OPT_SIMV).avg_saif.log;	\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.avg.saif;					\
	$(ICC_OPT_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=0 	\
	      +AddWeight=100 +IgnoreErrors $(RUN) -l $(ICC_OPT_SIMV).add_saif.log;	\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.add.saif;					\
	$(ICC_OPT_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=100 \
	      +AddWeight=0 +IgnoreErrors $(RUN) -l $(ICC_OPT_SIMV).mul_saif.log;	\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.mul.saif;					\
	$(ICC_OPT_SIMV) $(VERILOG_SIMULATION_FLAGS) $(SAIF_RUNTIME_ARGS) +MulWeight=0 	\
	      +AddWeight=0 +IgnoreErrors $(RUN) -l $(ICC_OPT_SIMV).muladd_saif.log;	\
	mv $(FPPRODUCT).saif $(FPPRODUCT).icc.muladd.saif;



$(ICC_OPT_PWR_LOG): $(ICC_OPT_SAIF_DEPENDENCY) $(ICC_OPT_LOG) $(SYNTH_HOME)/report_power_icc.tcl
	@echo ""
	@echo Now Running ICC SHELL: Making $@ because of $?
	@echo =============================================
	@sleep 1;
	@if test ! -d "$(SYNTH_LOGS)"; then 	\
		mkdir -p $(SYNTH_LOGS);		\
	fi
	cd $(SYNTH_RUNDIR); 							\
	icc_shell -64bit -x $(ICC_OPT_PWR_COMMAND_STRING) 2>&1 | tee -i $(ICC_OPT_PWR_LOG)
	@perl $(DESIGN_HOME)/scripts/checkRun.pl $(ICC_OPT_PWR_LOG)


icc_opt_clean:
	@echo ""
	@echo Removing previous ICC run log
	@echo =============================================
	\rm -f $(ICC_OPT_LOG)

# One more rule to clean all synthesis/pnr related stuff
.PHONY: synthesis_clean
synthesis_clean:
	\rm -rf $(SYNTH_RUNDIR)

