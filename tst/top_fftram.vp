// Copyright 2013, all rights reserved.
// See below (end of file) for extended copyright information.
//
//; push (@INC, "./rtl");
//; require fftgen;       # log2(), iterate()
//; 
//; ########################################################################
//; # PARAMETERS cause default Genesist output to .v file
//; ########################################################################
// ---------------- Begin default Genesis2 parameter summary ----------------
//;
//; my $npoints = parameter
//;    #(Name=>'n_fft_points', Val=>16,
//;    (Name=>'n_fft_points', Val=>8,
//;     Doc=>'Number of complex data values to process.');
//;
//; my $upc = parameter
//;    (Name=>'units_per_cycle', Val=>1.0,
//;     Doc=>'Number of butterfly units per cycle (0.25, 0.5, 1.0, 2.0 or 4.0).');
//; 
//; my $op_width = parameter
//;    (Name=>'op_width', Val=>32,
//;     Doc=>'E.g. 64 (bits) for 32b each complex real+imaginary');
//;
//; my $test_mode = parameter
//;    (Name=>'test_mode', Val=>"TEST5",
//;     List=>["TEST0", "TEST1", "TEST2", "TEST3", "TEST4", "TEST5"],
//;     Doc=>'TEST0: integer adds; TEST1: complex adds; TEST2: complex mults');
//;
//; ########################################################################
//;
// ---------------- End default Genesis2 parameter summary ----------------
//;

//; # TEST overrides for op_width, etc.
//; if ($test_mode eq "TEST0") { $op_width = 32; }
//; if ($test_mode =~ "TEST[1-9]") { $op_width = 64; }  # TEST1, TEST2, TEST3, TEST4, TEST5...
//;
//; if ($test_mode eq "TEST5") {
//;     print "ERROR (top_fftram): TEST5 is supported by top_fft, not top_fftram.\n";
//;     $npoints = 8;
//; }

//; # To finish, must go through at least log2(npoints) stages
//; # of ($npoints/2) calcs at $nunits = min(1,$upc) calcs per
//; # cycle ($upc < 1 is taken care of by clock division).
//;
//; my $nunits = ($upc < 1) ? 1 : $upc;
//; my $ncy = fftgen::log2($npoints) * ($npoints/2)/$nunits;

// Generating clock unit clock/GCLK...
//; my $gclock = generate
//;    ('clock','GCLK',
//;     CLK_PERIOD=>1000, # 5 ns clock period
//;     RST_PERIOD=>   1, # Currently not used
//;     MAX_CYCLES=>  ($ncy+6)  # End simulation after complete cycle plus some.
//; );

// Generating fftctl unit fftctl/fftctl (nunits = `$nunits`, npoints=`$npoints`)...
//; my $fftctl = generate
//;    ('fftctl', 'fftctl',
//;     n_fft_points   =>$npoints,
//;     units_per_cycle=>$upc
//; );
//;# my $nunits = $fftctl->{nunits};

// Generating twiddle unit twiddle/twiddle (nunits = `$nunits`, npoints=`$npoints`)...
//; my $twiddle = generate
//;    ('twiddle', 'twiddle',
//;     n_fft_points   =>$npoints,
//;     units_per_cycle=>$upc,
//;     data_width     =>($op_width/2)
//; );

// Generating swizzle units swizzle/BFLY[0123]_{in,out}[12]_swizzle...
//; # E.g. $swizzle{BFLY0_in1} = BFLY0_in1_swizzle etc.
//; my %swizzle = ();
//; foreach my $io ("in1", "in2", "out1", "out2") {
//;    for (my $i=0; $i<$nunits; $i++) {
//;        my $pfx = "BFLY${i}_${io}"; # BFLY0_in1, BFLY0_in2, BFLY0_out1, ...
//;        $swizzle{$pfx} = generate
//;            ('swizzle', "${pfx}_swizzle",    # E.g. BFLY0_in1_swizzle
//;             , n_butterfly_units=>$nunits
//;             , n_fft_points     =>$npoints
//;            );
//;    }
//; }

// Generating fft ram fftram/fftram...
//;# if ($test_mode =~ /TEST[12]/) { $op_width = 64; } # op_width override (redundant w/above!)
//; my $fftram = generate
//;    ('fftram','fftram'
//;     , n_butterfly_units=>$nunits
//;     , n_fft_points     =>$npoints
//;     , op_width         =>$op_width
//;     , test_mode        =>$test_mode
//; );

// Generating butterfly unit(s), test mode `$test_mode`...
//;# In TEST0 mode, all operands == 1 to start, bfly unit adds out = in1 + in2,
//;# so that, at end, all locations should equal (npoints/2).  Magic!
//; my @BFLY = ();
//; for (my $i=0;  $i<$nunits; $i++) {
//;    $BFLY[$i] = generate
//;            ('butterfly', "BFLY$i"    # E.g. BFLY0, BFLY1, BFLY2, BFLY3
//;             , op_width=>32
//;             , op_type=>$test_mode
//;            );
//;    }

//;# //; foreach my $p (@{$fftctl->{ParametersList}}) {
//;# //;     my $val = $fftctl->{Parameters}->{$p}->{Val};
//;# //;     my $doc = $fftctl->{Parameters}->{$p}->{Doc};
//;# //;     printf("FOO 2a //     %-20s %8s %s\n", $p, "($val)", $doc);
//;# //; }
//;
module `mname`();
   // BEGIN WIRE DECLARATIONS

   //; $fftctl->printwires("      ", "wire_list");

   //; $twiddle->printwires("      ", "wire_list");

   //; my $nbanks = 4*$nunits;
   //; #my $awidth = fftgen::log2($npoints);
   //; my $bwidth = fftgen::log2($nbanks);
   //; my $rwidth = fftgen::log2($npoints/$nbanks);
   //; my $bbits = ($bwidth-1).":0";
   //; my $rbits = ($rwidth-1).":0";
   //; my $obits = ($op_width-1).":0";

   //;#    logic [1:0] BFLY0_in1_bnum;      logic [1:0] BFLY0_in2_bnum;
   //;#    logic [1:0] BFLY0_out1_bnum;      logic [1:0] BFLY0_out2_bnum;
   //;#    logic [1:0] BFLY0_in1_rnum;      logic [1:0] BFLY0_in2_rnum;
   //;#    logic [1:0] BFLY0_out1_rnum;      logic [1:0] BFLY0_out2_rnum;
   //;#
   // in1, in2 data from fftram to butterfly unit
   //; print fftgen::iterate($nunits,
   //;     "   logic [$obits] BFLY%d_in1_data;   ",
   //;     "   logic [$obits] BFLY%d_in2_data;\n");

   // out1, out2 data from butterfly unit to fftram
   //; print fftgen::iterate($nunits,
   //;     "   logic [$obits] BFLY%d_out1_data;  ",
   //;     "   logic [$obits] BFLY%d_out2_data;\n");

   // NOTE/BUG/TODO/FIXME how stupid this is; i think it's always the case that
   // (in1_bnum == out1_bnum) and (in1_rnum == out1_rnum) etc.

   // Swizzle-wires for in1, in2 bank num
   //; print fftgen::iterate($nunits,
   //;     "   logic [$bbits] BFLY%d_in1_bnum;   ",
   //;     "   logic [$bbits] BFLY%d_in2_bnum;\n");

   // Swizzle-wires for out1, out2 bank num
   //; print fftgen::iterate($nunits,
   //;     "   logic [$bbits] BFLY%d_out1_bnum;   ",
   //;     "   logic [$bbits] BFLY%d_out2_bnum;\n");

   // Swizzle-wires for in1, in2 row num
   //; print fftgen::iterate($nunits,
   //;     "   logic [$rbits] BFLY%d_in1_rnum;   ",
   //;     "   logic [$rbits] BFLY%d_in2_rnum;\n");

   // Swizzle-wires for out1, out2 row num
   //; print fftgen::iterate($nunits,
   //;     "   logic [$rbits] BFLY%d_out1_rnum;   ",
   //;     "   logic [$rbits] BFLY%d_out2_rnum;\n");

   // END WIRE DECLARATIONS

   //;# BEGIN SPM TEST__________________________________________________________
   //; my $spm_test = 1;
   //; if ($spm_test) {
   /////////////////////////////////////////////////////////////////////////////
   // http://msdn.microsoft.com/en-us/library/0b34tf65.aspx
   // Single-precision multiplier: 64-bit fp is 23, 8

   logic [31:0] dsa;
   logic [31:0] dsb;
   logic [31:0] dsz;
   logic [ 7:0] status_sp;
   
   DW_fp_mult #(23, 8, 1)// #(sig, exp, compliance (0 or 1)) 
   spmult (.a(dsa), .b(dsb), .z(dsz), .rnd(3'b000), .status(status_sp));
   
   initial begin
      dsa = $shortrealtobits(0.5);
      dsb = $shortrealtobits(0.5);
   end
   
   always @(posedge start) if (~rst_n) begin
      $display("top_fftram_spm: test of single-precision multiplier");
      $display("top_fftram_spm: dsa_x=%x dsb_x=%x dsz_x=%x", dsa, dsb, dsz);
      $display("top_fftram_spm: dsa_f=%f dsb_f=%f dsz_f=%f", $bitstoshortreal(dsa), $bitstoshortreal(dsb), $bitstoshortreal(dsz));
      $display("top_fftram_spm: status=%x", status_sp);
      $display("top_fftram_spm:");
   end
   //; }
   //;# END SPM TEST____________________________________________________________

   assign cycle_num = fftctl_cycle_num;  // Weird?  Contrived?

   initial begin
      $display("\nfftmem.vp: n_butterfly_units=`$nunits` and n_fft_points=`$npoints`\n");
   end

   // Instantiate swizzle units BFLY0_in1_swizzle, BFLY0_in2_swizzle etc.
   //;
   //;#swizzle_unq1  BFLY0_in1_swizzle(.addr_i(BFLY0_in1_ix), .rnum_o(BFLY0_in1_rnum), .bnum_o(BFLY0_in1_bnum));
   //;
   //; foreach my $io ("in1", "in2", "out1", "out2") {
   //;    for (my $i=0; $i<$nunits; $i++) {
   //;        my $pfx = "BFLY${i}_${io}";    # BFLY0_in1, BFLY0_in2, BFLY0_out1, ...
   `$swizzle{$pfx}->instantiate()`(.addr_i(`$pfx`_ix), .rnum_o(`$pfx`_rnum), .bnum_o(`$pfx`_bnum));
   //; }}

   // Swizzler translation guide.
   always @(negedge clk) begin
      $display("");
      $display("top_fftram swizzle: ix%02d => SRAM%03d mem[%02d]", BFLY0_in1_ix, BFLY0_in1_bnum, BFLY0_in1_rnum);
      $display("top_fftram swizzle: ix%02d => SRAM%03d mem[%02d]", BFLY0_in2_ix, BFLY0_in2_bnum, BFLY0_in2_rnum);
      $display("");
   end
               

    // In TEST0 mode, all operands == 1 to start, bfly unit adds out = in1 + in2,
    // so that, at end, all locations should equal (npoints/2).  Magic!
    //;    for (my $i=0; $i<$nunits; $i++) {
    `$BFLY[$i]->instantiate()`(.in1(BFLY`$i`_in1_data), // .remote(local)
                               .in2(BFLY`$i`_in2_data),
                               .twc(BFLY`$i`_twiddle_cos),
                               .tws(BFLY`$i`_twiddle_sin),
                               .out1(BFLY`$i`_out1_data),
                               .out2(BFLY`$i`_out2_data)
                               );
    //; }

   // DEBUG/TEST info: cycle_nums
   always @(posedge clk) if (~rst_n) begin
      $display("");
//;#      $display("top_fftram %5d: fftctl_cycle_num=%d", $time, fftctl_cycle_num);
//;#      $display("top_fftram %5d:        cycle_num=%d",        $time, cycle_num);
      $display("top_fftram %5d: BFLY0_twiddle_cos = %x (%f)", $time, BFLY0_twiddle_cos,
                                                              $bitstoshortreal(BFLY0_twiddle_cos));
//;#      $display("top_fftram %5d: BFLY0_twiddle_cos = %f", $time, $bitstoshortreal(BFLY0_twiddle_cos));
      $display("");
   end
   

   // DEBUG/TEST info: show swizzle translations.
   always @(posedge clk) begin
    //$display("\ntop_fftram: ez_i=%1d, wz_i=%d\n", ez_i, wz_i);

      //; foreach my $io ("in1", "in2") {
      //;    for (my $i=0; $i<$nunits; $i++) {
      //;        my $pfx = "BFLY${i}_${io}";    # BFLY0_in1, BFLY0_in2, BFLY0_out1, ...
      $display("top_fftram %1d: `$pfx` ix %02d comes from bank %2d row %3d", $time,
               `$pfx`_ix, `$pfx`_bnum, `$pfx`_rnum);
      //; }}

      //; foreach my $io ("out1", "out2") {
      //;    for (my $i=0; $i<$nunits; $i++) {
      //;        my $pfx = "BFLY${i}_${io}";    # BFLY0_in1, BFLY0_in2, BFLY0_out1, ...
      $display("top_fftram %1d: `$pfx`_ix %02d goes to bank %2d row %3d", $time,
               `$pfx`_ix, `$pfx`_bnum, `$pfx`_rnum);
      //; }}

      $display("top_fftram");
   end // always @ (posedge clk)

   // Instantiate and connect up the fft memory.
   `$fftram->instantiate()`  // .remote(local)
      (
       .clk_i(clk)

     //; my $bitwidth = sprintf("[%d:0]", fftgen::log2($npoints)-1);  #  E.g. "[0:3]" if npoints = 16
     //;       
     // in1, in2 addresses from fftram (bnum)
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_in1_bnum_i", "(BFLY%d_in1_bnum)   ",
     //;                       "     ,.BFLY%d_in2_bnum_i", "(BFLY%d_in2_bnum)\n");

     // in1, in2 addresses from fftram (rnum)
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_in1_rnum_i", "(BFLY%d_in1_rnum)   ",
     //;                       "     ,.BFLY%d_in2_rnum_i", "(BFLY%d_in2_rnum)\n");

     // out1, out2 addresses from fftram (bnum)
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_out1_bnum_i", "(BFLY%d_out1_bnum)  ",
     //;                       "     ,.BFLY%d_out2_bnum_i", "(BFLY%d_out2_bnum)\n");

     // out1, out2 addresses from fftram (rnum)
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_out1_rnum_i", "(BFLY%d_out1_rnum)  ",
     //;                       "     ,.BFLY%d_out2_rnum_i", "(BFLY%d_out2_rnum)\n");

     // Data OUT from fftram (and in) to butterfly units: in1, in2
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_in1_data_o", "(BFLY%d_in1_data)    ",
     //;                       "     ,.BFLY%d_in2_data_o", "(BFLY%d_in2_data)\n");

     // Data IN from butterfly units (and out) to fftram: out1, out2
     //; print fftgen::iterate($nunits,
     //;                       "    ,.BFLY%d_out1_data_i", "(BFLY%d_out1_data) ",
     //;                       "    ,.BFLY%d_out2_data_i", "(BFLY%d_out2_data)\n");

     ,.fft_started(busy | start)

       );

//;#    // Here's the magic: out = in1 + in2 means that, at end, all locations should equal (npoints/2).
//;#    //;# assign BFLY0_out1_data = BFLY0_in1_data + BFLY0_in2_data;
//;#    //;# assign BFLY0_out2_data = BFLY0_in1_data + BFLY0_in2_data;
//;#    //; print fftgen::iterate($nunits,
//;#    //;     "   assign BFLY%d_out1_data = ", "BFLY%d_in1_data + ", "BFLY%d_in2_data;\n",
//;#    //;     "   assign BFLY%d_out2_data = ", "BFLY%d_in1_data + ", "BFLY%d_in2_data;\n\n",);

   //; my $real="63:32"; # Real
   //; my $imag="31: 0"; # Imaginary

   always @(posedge clk) if (busy | start) begin
      //; if ($test_mode eq "TEST0") {
         $display("");
         $display("top_fftram %5d: out1=(in1+in2): %2d = (%1d + %1d)",
                  $time, BFLY0_out1_data, BFLY0_in1_data, BFLY0_in2_data);
         $display("");
      
      //; } elsif ($test_mode eq "TEST1") {

         $display("");
         $display("top_fftram %5d: out1_real=in1_real=%1d", $time, BFLY0_in1_data[`$real`]);
         $display("top_fftram %5d: out1_imag=(in1_real+in1_imag): %1d = (%1d + %1d)", $time,
                  BFLY0_out1_data[`$imag`], BFLY0_in1_data[`$real`], BFLY0_in1_data[`$imag`]);
         $display("");

      //; } elsif ($test_mode eq "TEST2") {

         $display("");
         $display("top_fftram %5d: out1_real=in1_real=%1d", $time, BFLY0_in1_data[`$real`]);
         $display("top_fftram %5d: out1_imag=(in1_real*in1_imag): %2d = (%1d * %1d)", $time,
                  BFLY0_out1_data[`$imag`], BFLY0_in1_data[`$real`], BFLY0_in1_data[`$imag`]);
         $display("");

      //; } elsif ($test_mode eq "TEST3") {

         $display("");
         $display("top_fftram %5d: out1_real=in1_real=%1f", $time, $bitstoshortreal(BFLY0_in1_data[`$real`]));
         $display("top_fftram %5d: out1_imag=(in1_real*in1_imag): %1f = (%1f * %1f)", $time,
                  $bitstoshortreal(BFLY0_out1_data[`$imag`]),
                  $bitstoshortreal(BFLY0_in1_data[`$real`]),
                  $bitstoshortreal(BFLY0_in1_data[`$imag`]));
         $display("");

      //; } elsif ($test_mode eq "TEST4") {

         $display("");
         $display("top_fftram %5d: out1_imag = %9.6f", $time, $bitstoshortreal(BFLY0_out1_data[`$imag`]));
         $display("top_fftram %5d: out2_imag = %9.6f", $time, $bitstoshortreal(BFLY0_out2_data[`$imag`]));
         $display("");
      //; }
   end

   // Generate clock and connect it to local wire ".clk"
   `$gclock->instantiate()`(.clk(clk), .reset(rst_n));       // .remote(local)

   `$fftctl->instantiate()`
     (                                                       // .remote(local)
       //; $fftctl->printconnections("      ");
    );

   `$twiddle->instantiate()`
     (                                                       // .remote(local)
       //; $twiddle->printconnections("      ");
    );

   initial begin
      $vcdpluson(   0  , `($self->get_top())->mname`);
      //start <= 0; // It's STUPID to use "<=" in an initial block (right!??)
      start = 0; // It's STUPID to use "<=" in an initial block (right!??)
   end

   always @(negedge rst_n) begin
      start = 1;
      @(posedge clk) begin start = 0; end
   end

endmodule

/////////////////////////////////////////////////////////////////////////////////
// MIT License
// 
// Copyright (c) 2013 Stephen E. Richardson and Stanford University
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
// PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-
// TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// 
// For more information please contact
// Stephen E. Richardson  steveri@stanford.edu (Stanford University)
// Prof. Mark Horowitz   horowitz@stanford.edu (Stanford University)
/////////////////////////////////////////////////////////////////////////////////
