// Copyright 2013, all rights reserved.
// See below (end of file) for extended copyright information.
//
//;# push (@INC, "./rtl"); # Now this happens in "Makefile.local"
//; require fftgen;        # log2(), iterate()
//;
//; ########################################################################
//; # PARAMETERS cause default Genesist output to .v file
//; ########################################################################
// ---------------- Begin default Genesis2 parameter summary ----------------
//;
//; my $npoints = parameter
//;    (Name=>'n_fft_points', Val=>16,
//;     Doc=>'Number of complex data values to process.');
//;
//; my $upc = parameter
//;    (Name=>'units_per_cycle', Val=>1.0,
//;     Doc=>'Number of butterfly units per cycle (0.25, 0.5, 1.0, 2.0 or 4.0).');
//; 
//; ########################################################################
//;
// ---------------- End default Genesis2 parameter summary ----------------

//; my $nunits = ($upc < 1) ? 1 : $upc;

// Generate clock unit
//; my $gclock = generate
//;    ('clock','GCLK',
//;     CLK_PERIOD=>1000, # 5 ns clock period
//;     RST_PERIOD=>   1, # Currently not used
//;     MAX_CYCLES=>  16  # End simulation after 16 cycles
//; );

//;# Generate fftctl unit
//; my $fftctl = generate
//;    ('fftctl', 'fftctl',
//;     n_fft_points   =>$npoints,
//;     units_per_cycle=>$upc
//; );
//;# my $nunits = $fftctl->{nunits};
//;# my $npoints = $fftctl->{Parameters}->{"n_fft_points"}->{Val};
// Generated fftctl unit (nunits = `$nunits`, npoints=`$npoints`)
//;# print "// nunits = $nunits, npoints=$npoints\n";

// Generate monsterfile
//; my $monsterfile = generate
//;    ('monsterfile', 'monsterfile',
//;     n_butterfly_units  =>$nunits,
//;     n_fft_points       =>16
//; );

// Generate swizzle unit(s)
//;# E.g. $swizzle{BFLY0_in1} = BFLY0_in1_swizzle etc.
//; my %swizzle = ();
//; foreach my $io ("in1", "in2", "out1", "out2") {
//;    for (my $i=0; $i<$nunits; $i++) {
//;        my $pfx = "BFLY${i}_${io}"; # BFLY0_in1, BFLY0_in2, BFLY0_out1, ...
//;        $swizzle{$pfx} = generate
//;            ('swizzle', "${pfx}_swizzle",    # E.g. BFLY0_in1_swizzle
//;             , n_butterfly_units=>$nunits
//;             , n_fft_points     =>$npoints
//;            );
//;    }
//; }
//;
//;# //; my $nunits = $fftctl->{Parameters}->{"n_butterfly_units"}->{Val};
//;# 
//;# //; foreach my $p (@{$fftctl->{ParametersList}}) {
//;# //;     my $val = $fftctl->{Parameters}->{$p}->{Val};
//;# //;     my $doc = $fftctl->{Parameters}->{$p}->{Doc};
//;# //;     printf("FOO 2a //     %-20s %8s %s\n", $p, "($val)", $doc);
//;# //; }

module `mname`
  ();
   // BEGIN WIRE DECLARATIONS

   // fftctl->printwires("   ", "wire_list")
   //; $fftctl->printwires("   ", "wire_list");

   // in1, in2 data from regfile to butterfly unit
   //; print fftgen::iterate($nunits,
   //;     "   logic [31:0] BFLY%d_in1_data;   ",
   //;     "   logic [31:0] BFLY%d_in2_data;\n");

   // out1, out2 data from butterfly unit to regfile
   //; print fftgen::iterate($nunits,
   //;     "   logic [31:0] BFLY%d_out1_data;  ",
   //;     "   logic [31:0] BFLY%d_out2_data;\n");

   ////////////////////////////////////////////////////////////////////////
   // Swizzle wires.
   //; my $nbanks = 4*$nunits;
   //; #my $awidth = fftgen::log2($npoints);
   //; my $bwidth = fftgen::log2($nbanks);
   //; my $rwidth = fftgen::log2($npoints/$nbanks);
   //; my $bbits = ($bwidth-1).":0";
   //; my $rbits = ($rwidth-1).":0";

   // Swizzle banknum wires for in1, in2
   //; print fftgen::iterate($nunits,
   //;     "   logic [$bbits] BFLY%d_in1_bnum;   ",
   //;     "   logic [$bbits] BFLY%d_in2_bnum;\n");

   // Swizzle banknum wires for out1, out2
   //; print fftgen::iterate($nunits,
   //;     "   logic [$bbits] BFLY%d_out1_bnum;   ",
   //;     "   logic [$bbits] BFLY%d_out2_bnum;\n");

   // Swizzle rownum wires for in1, in2
   //; print fftgen::iterate($nunits,
   //;     "   logic [$bbits] BFLY%d_in1_rnum;   ",
   //;     "   logic [$bbits] BFLY%d_in2_rnum;\n");

   // Swizzle rownum wires for out1, out2
   //; print fftgen::iterate($nunits,
   //;     "   logic [$bbits] BFLY%d_out1_rnum;   ",
   //;     "   logic [$bbits] BFLY%d_out2_rnum;\n");

   // END WIRE DECLARATIONS

   // Here's the magic: out = in1 + in2 means that, at end, all locations should equal (npoints/2).
   //;# assign BFLY0_out1_data = BFLY0_in1_data + BFLY0_in2_data;
   //;# assign BFLY0_out2_data = BFLY0_in1_data + BFLY0_in2_data;
   //; print fftgen::iterate($nunits,
   //;     "   assign BFLY%d_out1_data = ", "BFLY%d_in1_data + ", "BFLY%d_in2_data;\n",
   //;     "   assign BFLY%d_out2_data = ", "BFLY%d_in1_data + ", "BFLY%d_in2_data;\n\n",);

   // generates clock and connects it to local wire ".clk_i"
   `$gclock->instantiate()`(.clk(clk_i), .reset(rst_n_i)); // .remote(local)

   `$fftctl->instantiate()`
     (                                                     // .remote(local)
       //; $fftctl->printconnections("      ");
    );

   `$monsterfile->instantiate()`
     (                                                     // .remote(local)
      .clk_i(clk_i),

      // Butterfly unit addresses and data
      
      // in1, in2 addresses
      //; # input logic [3:0] BFLY0_in1_ix,       input logic [3:0] BFLY0_in2_ix,
      //; # input logic [3:0] BFLY1_in1_ix,       input logic [3:0] BFLY1_in2_ix,
      //; # input logic [3:0] BFLY2_in1_ix,       input logic [3:0] BFLY2_in2_ix,
      //; # input logic [3:0] BFLY3_in1_ix,       input logic [3:0] BFLY3_in2_ix,
      //; # print "FOO1 nunits = $nunits, npoints=$npoints\n";
      //; print fftgen::iterate($nunits,
      //;     "      .BFLY%d_in1_ix", "(BFLY%d_in1_ix),",
      //;     "      .BFLY%d_in2_ix", "(BFLY%d_in2_ix),\n");

      // out1, out2 addresses
      //; # input logic [3:0] BFLY0_out1_ix,     input logic [3:0] BFLY0_out2_ix,
      //; # input logic [3:0] BFLY1_out1_ix,     input logic [3:0] BFLY1_out2_ix,
      //; # input logic [3:0] BFLY2_out1_ix,     input logic [3:0] BFLY2_out2_ix,
      //; # input logic [3:0] BFLY3_out1_ix,     input logic [3:0] BFLY3_out2_ix,
      //; print fftgen::iterate($nunits,
      //;     "      .BFLY%d_out1_ix", "(BFLY%d_out1_ix),",
      //;     "      .BFLY%d_out2_ix", "(BFLY%d_out2_ix),\n");

      // in1, in2 data OUT to butterfly unit
      //; # input logic [3:0] BFLY0_in1_data,       input logic [3:0] BFLY0_in2_data,
      //; # input logic [3:0] BFLY1_in1_data,       input logic [3:0] BFLY1_in2_data,
      //; # input logic [3:0] BFLY2_in1_data,       input logic [3:0] BFLY2_in2_data,
      //; # input logic [3:0] BFLY3_in1_data,       input logic [3:0] BFLY3_in2_data,
      //; print fftgen::iterate($nunits,
      //;     "      .BFLY%d_in1_data", "(BFLY%d_in1_data),",
      //;     "      .BFLY%d_in2_data", "(BFLY%d_in2_data),\n");

      // out1, out2 data back IN from butterfly unit
      //; # input logic [3:0] BFLY0_out1_data,     input logic [3:0] BFLY0_out2_data,
      //; # input logic [3:0] BFLY1_out1_data,     input logic [3:0] BFLY1_out2_data,
      //; # input logic [3:0] BFLY2_out1_data,     input logic [3:0] BFLY2_out2_data,
      //; # input logic [3:0] BFLY3_out1_data,     input logic [3:0] BFLY3_out2_data,
      //; print fftgen::iterate($nunits,
      //;     "      .BFLY%d_out1_data", "(BFLY%d_out1_data),",
      //;     "      .BFLY%d_out2_data", "(BFLY%d_out2_data),\n");

      .we_i(we_o)
      );

//;#   //; my $i = 0;
//;#   `$swizzle->instantiate()`(.addr_i(BFLY`$i`_in1_ix), .rnum_o(BFLY`$i`_in1_rnum), .bnum_o(BFLY`$i`_in1_bnum));

   // Instantiate swizzle units BFLY0_in1_swizzle, BFLY0_in2_swizzle etc.
      //; foreach my $io ("in1", "in2", "out1", "out2") {
      //;    for (my $i=0; $i<$nunits; $i++) {
      //;        my $pfx = "BFLY${i}_${io}";    # BFLY0_in1, BFLY0_in2, BFLY0_out1, ...
   `$swizzle{$pfx}->instantiate()`(.addr_i(`$pfx`_ix), .rnum_o(`$pfx`_rnum), .bnum_o(`$pfx`_bnum));
      //; }}

   //; my $i = 0;
   always @(posedge clk_i) begin
      if (busy_o === 1) begin

//;#         $display("top_swizzle: BFLY0_in1 ix %02d goes to bank %2d row %3d",
//;#                  BFLY`$i`_in1_ix, BFLY`$i`_in1_bnum, BFLY`$i`_in1_rnum);

         //; foreach my $io ("in1", "in2", "out1", "out2") {
         //;    for (my $i=0; $i<$nunits; $i++) {
         //;        my $pfx = "BFLY${i}_${io}";    # BFLY0_in1, BFLY0_in2, BFLY0_out1, ...
         $display("top_swizzle: `$pfx` ix %02d goes to bank %2d row %3d",
                  `$pfx`_ix, `$pfx`_bnum, `$pfx`_rnum);
         //; }}
      end
   end

   initial begin
      $vcdpluson(   0  , `($self->get_top())->mname`);
      //start_i <= 0; // It's STUPID to use "<=" in an initial block (right!??)
      start_i = 0; // It's STUPID to use "<=" in an initial block (right!??)
   end

   always @(negedge rst_n_i) begin
      start_i = 1;
      @(posedge clk_i) begin start_i = 0; end
   end
   

endmodule
//////////////////////////////////////////////////////////////////////////////
// Copyright Stephen Richardson and Stanford University.  All rights reserved.
//              Exclusively Licensed by Chip Genesis Inc.
//
// The code, the algorithm, or any part of it is not to be copied/reproduced.
// The code, the algorithm, or results from running this code may not be used
// for any commercial use unless legally licensed.
//
// For more information please contact
//   Ofer Shacham (Stanford Univ./Chip Genesis)   shacham@alumni.stanford.edu
//   Professor Mark Horowitz (Stanford Univ.)     horowitz@stanford.edu
//
// Genesis2 is patent pending. For information regarding the patent please
// contact the Stanford Technology Licensing Office.
///////////////////////////////////////////////////////////////////////////////
