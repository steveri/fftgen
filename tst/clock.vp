// ---------------- Begin default Genesis2 parameter summary ----------------
//
//; # parameter() calls send default Genesis output to top of .v file
//; my $CLK_PERIOD = parameter
//;    (Name=>'CLK_PERIOD', Val=>5000, Min=>2, Step=>2,
//;     Doc=>'What is the clock period in ps? (must be even)');
//;
//; my $RST_PERIOD = parameter
//;    (Name=>'RST_PERIOD', Val=>1, Min=>1, Step=>1,
//; 	Doc=>'What is the length of time before reset (in clock cycles)?');
//;
//; my $MAX_CYCLES = parameter
//;    (Name=>'MAX_CYCLES', Val=>10, Min=>1, Step=>1,
//; 	Doc=>'What is max runtime (in clock cycles)?');
//;
// ---------------- End default Genesis2 parameter summary ----------------

////////////////////////////////////////////////////////////////////////
//module clock
module `mname`
  (output reg clk,
   output reg reset);
   
   parameter CLK_PERIOD = `$CLK_PERIOD`;  // E.g. 5000 = 5ns
   parameter RST_PERIOD = `$RST_PERIOD`;  // E.g. 20 (cycles)
   parameter MAX_CYCLES = `$MAX_CYCLES`;  // E.g. 10 (cycles), then call $finish

   int 		 clk_period;
   int 		 clk_half_period;
   int           nclocks;
           
   initial begin
      $display("\nclock.vp: BEGIN STUPID SIMULATION THINGY\n");

      clk = 1'b0;
      reset = 1'b1;
      $display("\nclock.vp: BEGIN clk=%d \n", clk);
      $display("\nclock.vp: BEGIN reset=%d \n", reset);
      calibrate_clk;
      fork
	 do_clk;
	 do_reset;
      join_none
   end

   // Task to read runtime clock period argument if any
   task calibrate_clk;
      //;#clk_period = `#$clk_period`;
      clk_period = CLK_PERIOD;
      clk_half_period = clk_period / 2;
      
      if ($test$plusargs("clk_period")) begin
	 $value$plusargs("clk_period=%g",clk_period);
	 clk_half_period = clk_period / 2 ;
      end
      
      if (clk_period < 100) begin
	      $display("clock.vp: ERROR: Clock period %1d too small, Try again", clk_period);
	      $finish(2);
      end else begin
	$display("clock.vp: Using clock period= %1d ns\n", clk_period/1000) ;
      end
   endtask // calibrate_clk

   // task to reverse reset (works for both pos and neg reset logic)
   task do_reset;
      //;#repeat(`$reset_period`) @(posedge clk);
      repeat(RST_PERIOD) @(posedge clk);  // Wait for RST_PERIOD posedges
      reset = ~reset;
      $display("\nRESET!!!\n");
   endtask // do_reset
   

   // task to toggle clk
   task do_clk;
      while (1) begin // Endless loop(ends when reach MAX_CYCLES).
         if (clk == 0) begin
            $display("------------------------------------------------------------------------------");
            $display("clock.vp: reset=%1d, ncy= %3d, time= %5d ns", reset, nclocks, $time/1000);
            $display("------------------------------------------------------------------------------");
            if (nclocks == MAX_CYCLES) begin
               $display("\n\nclock.vp: ENDING AFTER %1d CLOCKS time=%1d ps,  ncy=%1d\n\n", MAX_CYCLES, $time, nclocks);
               $finish;
            end
            nclocks++;
         end
	 #clk_half_period;
	 clk = ~clk;
      end
   endtask // do_clk
   
endmodule


