// Copyright 2013, all rights reserved.
// See below (end of file) for extended copyright information.
//
//;# push (@INC, "./rtl"); # Now this happens when "Makefile.local" (sets PERL5LIB)
//; require fftgen;        # log2(), iterate()
//; require twiddle;
//; require sram_init;     # swizzled_test_pattern()
//;
// ---------------- Begin default Genesis2 parameter summary ----------------
//; # parameter() calls send default Genesis output to top of .v file
//; 
//; my $npoints = parameter
//;    (Name=>'n_fft_points', Val=>8, List=>[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192],
//;     Doc=>'Number of complex data values to process.');
//; 
//; my $upc = parameter
//;    (Name=>'units_per_cycle', Val=>1.0, List=>[0.25, 0.50, 1.0, 2.0, 4.0],
//;     Doc=>'Butterfly units per cycle (0.25, 0.5, 1.0, 2.0 or 4.0).');
//; 
//; my $SRAM_TYPE = parameter
//;    (Name=>'SRAM_TYPE', Val=>"TRUE_1PORT",
//;     List=>["TRUE_1PORT", "TRUE_2PORT", "1PORT_DBLPUMP"],
//;     Doc=>'What kind of SRAM should the FFT use?');
//; 
//; my $op_width = parameter
//;    (Name=>'op_width', Val=>64, List=>[64], Force=>1,
//;     Doc=>'For now only option is 64 (bits) for 32b each complex real+imaginary');
//; 
//; my $swizzle_algorithm = parameter
//;    (Name=>'swizzle_algorithm', Val=>"round7",
//;     List=>["round7", "mod_bn_combo", "takala"],
//;     Doc=>'round7 is the only one that works(!)');
//; 
//; my $test_mode = parameter
//;    (Name=>'test_mode', Val=>"TEST5", Force=>1,
//;     List=>["TEST0", "TEST1", "TEST2", "TEST3", "TEST4", "TEST5"],
//;     Doc=>'TEST0: integer adds; TEST1: complex adds; TEST2: complex mults');
//; 
//; 
//; my $SIMULATOR = parameter
//;    (Name=>'SIMULATOR', Val=>"verilator",
//;     List=>["verilator", "vcs"],
//; 	Doc=>'Simulator: "verilator" or "vcs"');
//;
// ---------------- End default Genesis2 parameter summary ----------------

//; # Should match identical line(s) in fftram.vp
//; my $BYPASS_MECHANISM = 'old';
//; my $BYPASS_MECHANISM = 'new';

//; # TEST can override op_width, etc. settings.
//; if ($test_mode eq "TEST0") { $op_width = 32; }
//; if ($test_mode =~ "TEST[1-9]") { $op_width = 64; }  # TEST1, TEST2, TEST3, TEST4, TEST5...
//;
//; # To finish, must go through at least log2(npoints) stages
//; # of ($npoints/2) calcs at $nunits = min(1,$upc) calcs per
//; # cycle ($upc < 1 is taken care of by clock division).
//;
//; my $nunits = ($upc < 1) ? 1 : $upc;
//; my $ncy = fftgen::log2($npoints) * ($npoints/2)/$upc;
//; my $endtime = $ncy + 6; # End simulation after complete cycle plus some.
//;
//; my $gclock = "";
//; if ($SIMULATOR eq "vcs") {
// Generating clock unit clock/GCLK (vcs only)...
//;   $gclock = generate
//;      ('clock','GCLK',
//;       SIMULATOR=>$SIMULATOR, # vcs or verilator
//;       CLK_PERIOD=>1000,      # 5 ns clock period
//;       RST_PERIOD=>   1,      # Currently not used
//;       MAX_CYCLES=>  $endtime # End simulation after complete cycle plus some.
//;   );
//; } else {
// Clock will be supplied by verilator...
//; }

// Generating fftctl unit fftctl/fftctl (nunits = `$nunits`, npoints=`$npoints`)...
//; my $fftctl = generate
//;    ('fftctl', 'fftctl'
//;     , n_fft_points    =>$npoints
//;     , units_per_cycle =>$upc
//;     , SRAM_TYPE       =>$SRAM_TYPE
//;     , swizzle_algorithm=>$swizzle_algorithm
//; );

// Generating twiddle unit twiddle/twiddle (nunits = `$nunits`, npoints=`$npoints`)...
//; my $twiddle = generate
//;    ('twiddle', 'twiddle',
//;     n_fft_points   =>$npoints,
//;     units_per_cycle=>$upc,
//;     data_width     =>($op_width/2)
//; );

// Generating swizzle units swizzle/BFLY[0123]_{in,out}[12]_swizzle...
//; # E.g. $swizzle{BFLY0_op1} = BFLY0_op1_swizzle etc.
//; my %swizzle = ();
//; foreach my $io ("op1", "op2") {
//;    for (my $i=0; $i<$nunits; $i++) {
//;        my $pfx = "BFLY${i}_${io}";          # E.g. "BFLY0_op1, BFLY0_op2"
//;        $swizzle{$pfx} = generate
//;            ('swizzle', "${pfx}_swizzle",    # E.g. "BFLY0_op1_swizzle"
//;             , n_butterfly_units=>$nunits
//;             , n_fft_points     =>$npoints
//;             , swizzle_algorithm=>$swizzle_algorithm
//;            );
//;    }
//; }

// Generating fft ram fftram/fftram...
//;# if ($test_mode =~ /TEST[12]/) { $op_width = 64; } # op_width override (redundant w/above!)
//; my $fftram = generate
//;    ('fftram','fftram'
//;     , n_butterfly_units=>$nunits
//;     , n_fft_points     =>$npoints
//;     , SRAM_TYPE        =>$SRAM_TYPE
//;     , op_width         =>$op_width
//;     , test_mode        =>$test_mode
//; );

// Generating butterfly unit(s), test mode `$test_mode`...
//;# In TEST0 mode, all operands == 1 to start, bfly unit adds out = in1 + in2,
//;# so that, at end, all locations should equal (npoints/2).  Magic!
//; my @BFLY = ();
//; for (my $i=0;  $i<$nunits; $i++) {
//;    $BFLY[$i] = generate
//;            ('butterfly', "BFLY$i"    # E.g. BFLY0, BFLY1, BFLY2, BFLY3
//;             , op_width=>32
//;             , op_type=>$test_mode
//;            );
//;    }

//;# If you wanted to print a(nother) summary of the parameters, here's how you'd do it.
//;#
//;# //; foreach my $p (@{$fftctl->{ParametersList}}) {
//;# //;     my $val = $fftctl->{Parameters}->{$p}->{Val};
//;# //;     my $doc = $fftctl->{Parameters}->{$p}->{Doc};
//;# //;     printf("FOO 2a //     %-20s %8s %s\n", $p, "($val)", $doc);
//;# //; }
//;
//; if ($SIMULATOR eq "vcs") {
module `mname`();
//; } else {
module `mname`( input logic clk, output wire done );
//; }
   // BEGIN WIRE DECLARATIONS

   //; $fftctl->printwires("   ", "wire_list");

   // FIXME FIXME cycle_num below different than cycle_num signals in fftram, fftctl !!! :(
   //; twiddle_lib::printwires("   ", "wire_list");

   //; my $nbanks = 4*$nunits;             # SRAM banks, four for each butterfly.
   //; if (($swizzle_algorithm eq 'round7') && ($nbanks > $npoints)) { $nbanks = $npoints; } # FIXME little hacky hack here.
   //; my $bwidth = fftgen::log2($nbanks);
   //; my $bbits = ($bwidth-1).":0";
   //;
   //; my $rwidth = fftgen::log2($npoints/$nbanks); # SRAM rows
   //; if ($rwidth < 1) { $rwidth = 1; }     # Need at least one bit!!!
   //; my $rbits = ($rwidth-1).":0";
   //;
   //; my $obits = ($op_width-1).":0";     # Operand width (e.g. 64 => 32bit complex)
   //;
   // in1, in2 data from fftram to butterfly unit
   //; print fftgen::iterate($nunits,
   //;     "   logic [$obits] BFLY%d_in1_data;   ",
   //;     "   logic [$obits] BFLY%d_in2_data;\n");

   // out1, out2 data from butterfly unit to fftram
   //; print fftgen::iterate($nunits,
   //;     "   logic [$obits] BFLY%d_out1_data;  ",
   //;     "   logic [$obits] BFLY%d_out2_data;\n");

   // Swizzle-wires for op1, op2 bank num
   //; print fftgen::iterate($nunits,
   //;     "   logic [$bbits] BFLY%d_op1_bnum;   ",
   //;     "   logic [$bbits] BFLY%d_op2_bnum;\n");

   // Swizzle-wires for op1, op2 row num
   //; print fftgen::iterate($nunits,
   //;     "   logic [$rbits] BFLY%d_op1_rnum;   ",
   //;     "   logic [$rbits] BFLY%d_op2_rnum;\n");

   logic start;

   // END WIRE DECLARATIONS

   // Because fftctl calls it one thing and twiddle calls it something else.
   assign cycle_num = fftctl_cycle_num;

   // *Verilator* don't know from no $shortrealtowhatever
   // So instead of $shortrealtobits(1) we get...
   logic [31:0] _shortrealtobits_0 = 32'h0000_0000;
   logic [31:0] _shortrealtobits_1 = 32'h3f80_0000;

   //; if ($test_mode eq "TEST5") {
   initial begin
      // Generate a square wave to test the FFT, e.g.:
      // @a_real = (1, 0, 1, 0,  1, 0, 1, 0);    // bitreverse(1,1,1,1,  0,0,0,0)
      // @a_imag = (0, 0, 0, 0,  0, 0, 0, 0);
      //;
      //;# // ix=0 => bank 0, row 0 <= ( 1.000,  0.000)
      //;# top_fft.fftram.SRAM000.mem[0][`$real`] = _shortrealtobits_1;
      //;# top_fft.fftram.SRAM000.mem[0][`$imag`] = _shortrealtobits_0;
      //;#
      //;# // ix=1 => bank 3, row 0 <= ( 0.000,  0.000)
      //;# top_fft.fftram.SRAM003.mem[0][`$real`] = _shortrealtobits_0;
      //;# top_fft.fftram.SRAM003.mem[0][`$imag`] = _shortrealtobits_0;
      //;# ...
      //;
      //; my $real="63:32"; # Real
      //; my $imag="31: 0"; # Imaginary
      //; sram_init::swizzled_test_pattern("      ", $npoints, $nunits, $real, $imag, "sq_wave", $swizzle_algorithm);

   end
   //; }

   initial begin
      $display("\nfftmem.vp: n_butterfly_units=`$nunits` and n_fft_points=`$npoints`\n");
   end

//; if ($SIMULATOR eq "vcs") {
   // Generate clock and connect it to local wire ".clk" (vcs only)
   `$gclock->instantiate()`(.clk(clk), .reset(rst_n));       // .remote(local)
//; } else {
   // Clock will be supplied by verilator; "clock_unq1" is for vcs only.
   // clock_unq1  GCLK(.clk(clk), .reset(rst_n));       // .remote(local)
//; }

   // Instantiate swizzle units BFLY0_op1_swizzle, BFLY0_op2_swizzle etc.
   //;
   //;#swizzle_unq1  BFLY0_op1_swizzle(.addr_i(BFLY0_op1_ix), .rnum_o(BFLY0_op1_rnum), .bnum_o(BFLY0_op1_bnum));
   //;
   //; foreach my $io ("op1", "op2") {
   //;    for (my $i=0; $i<$nunits; $i++) {
   //;        my $pfx = "BFLY${i}_${io}";    # BFLY0_op1, BFLY0_op2
   `$swizzle{$pfx}->instantiate()`(.addr_i(`$pfx`_ix), .rnum_o(`$pfx`_rnum), .bnum_o(`$pfx`_bnum));
   //; }}

   // Swizzler translation guide.
   always @(posedge fftclk) if (cycle_num > 0) begin
      $display("");
      //; for (my $i = 0; $i < $nunits; $i++) {
      //;    my $b = "BFLY$i"; # BFLY0, BFLY1, BFLY2...
//;#  $display("top_fft swizzle: ix%02d => SRAM%03d mem[%02d]", `$b`_op1_ix, `$b`_op1_bnum, `$b`_op1_rnum);
//;#  $display("top_fft swizzle: ix%02d => SRAM%03d mem[%02d]", `$b`_op2_ix, `$b`_op2_bnum, `$b`_op2_rnum);
      $display("top_fft swizzle %5d: `$b`_op1 ix%02d => SRAM%03d mem[%02d]", $time, `$b`_op1_ix, `$b`_op1_bnum, `$b`_op1_rnum);
      $display("top_fft swizzle %5d: `$b`_op2 ix%02d => SRAM%03d mem[%02d]", $time, `$b`_op2_ix, `$b`_op2_bnum, `$b`_op2_rnum);
      //; }
      $display("");
   end
               
    // In TEST0 mode, all operands == 1 to start, bfly unit adds out = in1 + in2,
    // so that, at end, all locations should equal (npoints/2).  Magic!
    //;    for (my $i=0; $i<$nunits; $i++) {
    `$BFLY[$i]->instantiate()`(.fftclk(fftclk),
                               .ready(~rst_n & (busy|start)), // .remote(local)
                               .in1(BFLY`$i`_in1_data),
                               .in2(BFLY`$i`_in2_data),
                               .twc(BFLY`$i`_twiddle_cos),
                               .tws(BFLY`$i`_twiddle_sin),
                               .out1(BFLY`$i`_out1_data),
                               .out2(BFLY`$i`_out2_data)
                               );
    //; }

   // DEBUG/TEST info: twiddle_cos, apparently.
   always @(posedge fftclk) if (~rst_n) begin
      $display("");
      $display("top_fft %5d: BFLY0_twiddle_cos = %x (bsr'%08X)",
               $time, BFLY0_twiddle_cos, BFLY0_twiddle_cos);
      $display("");
   end

   // DEBUG/TEST info: show swizzle translations.
   // FIXME I think this is supposed to be "negedge fftclk..?"
   // FIXME originally displayed at 602, 1602, 2602,...right???
   always @ (fftclk) if (fftclk==1) begin   // 602,1602,2602...(?)
      //; foreach my $io ("op1", "op2") {
      //;    for (my $i=0; $i<$nunits; $i++) {
      //;        my $pfx = "BFLY${i}_${io}";    # BFLY0_op1, BFLY0_op2, BFLY1_op1...
      $display("top_fft %1d: `$pfx` ix %02d comes from bank %2d row %3d", $time,
               `$pfx`_ix, `$pfx`_bnum, `$pfx`_rnum);
      //; }}
      $display("top_fft");
   end // always @ (posedge fftclk)



   // Instantiate the fft memory and connect to it..
   `$fftram->instantiate()`  // .remote(local)
      (
       .clk_i(fftclk)

     //; my $bitwidth = sprintf("[%d:0]", fftgen::log2($npoints)-1);  #  E.g. "[0:3]" if npoints = 16
     //;       
     // op1, op2 addresses from fftram (bnum)
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_op1_bnum_i", "(BFLY%d_op1_bnum)   ",
     //;                       "     ,.BFLY%d_op2_bnum_i", "(BFLY%d_op2_bnum)\n");

     // op1, op2 addresses from fftram (rnum)
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_op1_rnum_i", "(BFLY%d_op1_rnum)   ",
     //;                       "     ,.BFLY%d_op2_rnum_i", "(BFLY%d_op2_rnum)\n");

     // Data OUT from fftram (and in) to butterfly units: in1, in2
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_in1_data_o", "(BFLY%d_in1_data)    ",
     //;                       "     ,.BFLY%d_in2_data_o", "(BFLY%d_in2_data)\n");

     // Data IN from butterfly units (and out) to fftram: out1, out2
     //; print fftgen::iterate($nunits,
     //;                       "     ,.BFLY%d_out1_data_i", "(BFLY%d_out1_data) ",
     //;                       "     ,.BFLY%d_out2_data_i", "(BFLY%d_out2_data)\n");

     // Bypass controls
     ,.suppress_wz_i(suppress_wz)  // one bit per bank, set 100 ps after posedge
     //; if ($BYPASS_MECHANISM eq 'old') {
     ,.bypass_read_i(bypass_read)  // one bit per bank, set 100 ps after posedge
     ,.bufnum_i(bufnum)            // which buffer do we use for bypass?
     //; }

     ,.fft_started(busy | start)
     );

   //; my $real="63:32"; # Real
   //; my $imag="31: 0"; # Imaginary

   // Per-test display info for debugging.
   always @(posedge fftclk) if (busy | start) begin
      //; if ($test_mode eq "TEST0") {
         $display("");
         $display("top_fft %5d: out1=(in1+in2): %2d = (%1d + %1d)",
                  $time, BFLY0_out1_data, BFLY0_in1_data, BFLY0_in2_data);
         $display("");
      
      //; } elsif ($test_mode eq "TEST1") {

         $display("");
         $display("top_fft %5d: out1_real=in1_real=%1d", $time, BFLY0_in1_data[`$real`]);
         $display("top_fft %5d: out1_imag=(in1_real+in1_imag): %1d = (%1d + %1d)", $time,
                  BFLY0_out1_data[`$imag`], BFLY0_in1_data[`$real`], BFLY0_in1_data[`$imag`]);
         $display("");

      //; } elsif ($test_mode eq "TEST2") {

         $display("");
         $display("top_fft %5d: out1_real=in1_real=%1d", $time, BFLY0_in1_data[`$real`]);
         $display("top_fft %5d: out1_imag=(in1_real*in1_imag): %2d = (%1d * %1d)", $time,
                  BFLY0_out1_data[`$imag`], BFLY0_in1_data[`$real`], BFLY0_in1_data[`$imag`]);
         $display("");

      //; } elsif ($test_mode eq "TEST3") {

         $display("");
         $display("top_fft %5d: out1_real=in1_real=%1f", $time, $bitstoshortreal(BFLY0_in1_data[`$real`]));
         $display("top_fft %5d: out1_imag=(in1_real*in1_imag): %1f = (%1f * %1f)", $time,
                  $bitstoshortreal(BFLY0_out1_data[`$imag`]),
                  $bitstoshortreal(BFLY0_in1_data[`$real`]),
                  $bitstoshortreal(BFLY0_in1_data[`$imag`]));
         $display("");

      //; } elsif ($test_mode eq "TEST4") {

         $display("");
         $display("top_fft %5d: out1_imag = bsr'%08X", $time, BFLY0_out1_data[`$imag`]);
         $display("top_fft %5d: out2_imag = bsr'%08X", $time, BFLY0_out2_data[`$imag`]);
         $display("");

      //; } elsif ($test_mode eq "TEST5") {
         //;
         //; # sub sr{ my $s = shift; return "\$bitstoshortreal(${s})"; }
         //; # 06/2019 oops cannot use bitstoshortreal any more b/c verilator
         //; sub sr{ my $s = shift; return "${s}"; }
         //; sub r { my $s = shift; return sr("${s}[$real]"); }
         //; sub i { my $s = shift; return sr("${s}[$imag]"); }
         //; sub ri{ my $s = shift; return r($s).", ".i($s); }
         //;
         $display("top_fft t5");
         $display("top_fft t5 %5d: in1(r,i)= (bsr'%08X,bsr'%08X)", $time, `ri("BFLY0_in1_data")`);
         $display("top_fft t5 %5d: in2(r,i)= (bsr'%08X,bsr'%08X)", $time, `ri("BFLY0_in2_data")`);
         $display("top_fft t5");
         $display("top_fft t5 %5d: tw_cos  =     bsr'%08X", $time, `sr("BFLY0_twiddle_cos")`);
         $display("top_fft t5 %5d: tw_sin  =     bsr'%08X", $time, `sr("BFLY0_twiddle_sin")`);
         $display("top_fft t5");
         $display("top_fft t5 %5d: out1(r,i)= (bsr'%08X,bsr'%08X)", $time, `ri("BFLY0_out1_data")`);
         $display("top_fft t5 %5d: out2(r,i)= (bsr'%08X,bsr'%08X)", $time, `ri("BFLY0_out2_data")`);
         $display("top_fft t5");
         //;
      //; } else {
      //$display("top_fft %5d: in1 = %1d, in2 = %1d => out1 = %1d", $time, BFLY0_in1_data, BFLY0_in2_data, BFLY0_out1_data);
      $display("");
      $display("top_fft %5d: in1 = %1d", $time, BFLY0_in1_data);
      $display("top_fft %5d: in2 = %1d", $time, BFLY0_in2_data);
      $display("top_fft %5d: out1 = %1d", $time, BFLY0_out1_data);
      $display("");
      #100;
      $display("");
      $display("top_fft %5d: in1 = %1d", $time, BFLY0_in1_data);
      $display("top_fft %5d: in2 = %1d", $time, BFLY0_in2_data);
      $display("top_fft %5d: out1 = %1d", $time, BFLY0_out1_data);
      $display("");
      //; }
   end

   // FFT control signals and clock.
   `$fftctl->instantiate()`
     (                                                       // .remote(local)
       //; $fftctl->printconnections("      ");
    );

   `$twiddle->instantiate()`
     (                                                       // .remote(local)
       //; twiddle_lib::printconnections("      ");
    );

   ////////////////////////////////////////////////////////////////////////
   // BEGIN CLOCK AND RESET

   ////////////////////////////////////
   // Generate a reset and start
   // clk   ___.---.___.---.___.---.___
   //
   // rstn  ---._______________________
   // 
   // start ___.---.___________________
   //
   ////////////////////////////////////

   initial begin
      start = 1'b0; // Should be comb logic based on rst_n etc? leave it for now
      rst_n = 1'b1;
   end

   // note cgra does this:
   //  always @(posedge clk or posedge reset) begin
   //    if (reset==1'b1) begin ...
   //    end else begin  ...

   // Reset on very first posedge
   // FIXME this is terrible; for now we do it b/c matches vcs test rig :(
   // Eventually will need like a ncy signal or something
   always @ (posedge clk) begin
     if (rst_n) begin
        $display("\nRESET!!!");
        rst_n <= 1'b0;
        start <= 1'b1;
     end
     else begin // start is a one-shot, yes?
        start <= 1'b0;
     end
   end

   ////////////////////////////////////////////////////////////////////////
   // cycle counter I guess
   //
   logic [31:0] cycle_counter;

   always @ (posedge clk) begin
     if (rst_n) cycle_counter <= 32'b0;
     else       cycle_counter <= cycle_counter + 32'b1;
   end


//; # FIXME not sure this (divisor thingy) is correct or useful...
//; my $divisor = ($SIMULATOR eq "vcs") ? "1000" : "1";
   always @ (posedge clk) begin
      $display("------------------------------------------------------------------------------");
      $display("clock.vp: reset=%d, ncy=%4d, time=%6d ns", rst_n, cycle_counter, $time/`$divisor`);
      $display("------------------------------------------------------------------------------");
   end

//; if ($SIMULATOR eq "verilator") {
   assign done = (cycle_counter == 32'd`$endtime`);
//; }

   // END CLOCK AND RESET

endmodule

//;#    //;# BEGIN SPM TEST (single-precision-multiplier)____________________________
//;#    //; my $spm_test = 0;
//;#    //; if ($spm_test) {
//;#    /////////////////////////////////////////////////////////////////////////////
//;#    // http://msdn.microsoft.com/en-us/library/0b34tf65.aspx
//;#    // Single-precision multiplier: 64-bit fp is 23, 8
//;# 
//;#    logic [31:0] dsa;
//;#    logic [31:0] dsb;
//;#    logic [31:0] dsz;
//;#    logic [ 7:0] status_sp;
//;#    
//;#    DW_fp_mult #(23, 8, 1)// #(sig, exp, compliance (0 or 1)) 
//;#    spmult (.a(dsa), .b(dsb), .z(dsz), .rnd(3'b000), .status(status_sp));
//;#    
//;#    initial begin
//;#       dsa = $shortrealtobits(0.5);
//;#       dsb = $shortrealtobits(0.5);
//;#       $display("top_fft %5d SRAM_TYPE=`$SRAM_TYPE`", $time);
//;#    end
//;#    
//;#    always @(posedge start) if (~rst_n) begin
//;#       $display("top_fft_spm: test of single-precision multiplier");
//;#       $display("top_fft_spm: dsa_x=%x dsb_x=%x dsz_x=%x", dsa, dsb, dsz);
//;#       $display("top_fft_spm: dsa_f=%f dsb_f=%f dsz_f=%f", $bitstoshortreal(dsa), $bitstoshortreal(dsb), $bitstoshortreal(dsz));
//;#       $display("top_fft_spm: status=%x", status_sp);
//;#       $display("top_fft_spm:");
//;#    end
//;#    //; }
//;#    //;# END SPM TEST____________________________________________________________
//////////////////////////////////////////////////////////////////////////////
// Copyright Stephen Richardson and Stanford University.  All rights reserved.
//              Exclusively Licensed by Chip Genesis Inc.
//
// The code, the algorithm, or any part of it is not to be copied/reproduced.
// The code, the algorithm, or results from running this code may not be used
// for any commercial use unless legally licensed.
//
// For more information please contact
//   Ofer Shacham (Stanford Univ./Chip Genesis)   shacham@alumni.stanford.edu
//   Professor Mark Horowitz (Stanford Univ.)     horowitz@stanford.edu
//
// Genesis2 is patent pending. For information regarding the patent please
// contact the Stanford Technology Licensing Office.
///////////////////////////////////////////////////////////////////////////////
