// Copyright 2013, all rights reserved.
// See below (end of file) for extended copyright information.
//
//;# push (@INC, "./rtl"); # Now this happens in "Makefile.local"
//; require fftgen;        # log2(), iterate()
//;
//; ########################################################################
//; # PARAMETERS cause default Genesist output to .v file
//; ########################################################################
// ---------------- Begin default Genesis2 parameter summary ----------------
//
//; my $npoints = parameter
//;    (Name=>'n_fft_points', Val=>16,
//;     Doc=>'Number of complex data values to process.');
//;
//; my $upc = parameter
//;    (Name=>'units_per_cycle', Val=>4.0, List=>[0.25, 0.5, 1.0, 2.0, 4.0],
//;     Doc=>'Number active butterfly units per cycle (.25 means one unit at 1/4 speed)');
//; 
//; ########################################################################
//;
// ---------------- End default Genesis2 parameter summary ----------------

//; # To finish, must go through at least log2(npoints) stages
//; # of ($npoints/2) calcs at $nunits = min(1,$upc) calcs per
//; # cycle ($upc < 1 is taken care of by clock division).

//; my $nunits = ($upc < 1) ? 1 : $upc;
//; my $ncy = fftgen::log2($npoints) * ($npoints/2)/$nunits;

//; # E.g. npoints=16, upc=4 => 4 * (8/4) =>  8 total (check!)
//; # E.g. npoints=16, upc=1 => 4 * (8/1) => 32 total (check!)

//; my $gclock = generate
//;    ('clock','GCLK',
//;     CLK_PERIOD=>1000, # 5 ns clock period
//;     RST_PERIOD=>   1, # Currently not used
//;     MAX_CYCLES=>  ($ncy + 6)  # End simulation after 16 cycles
//; );

//; my $fftctl = generate
//;    ('fftctl', 'fftctl',
//;     n_fft_points   =>$npoints,
//;     units_per_cycle=>$upc
//; );

module `mname`
  ();
   //; $fftctl->printwires("   ", "wire_list");

   `$gclock->instantiate()`(.clk(clk_i), .reset(rst_n_i));

   `$fftctl->instantiate()`(
       //; $fftctl->printconnections("      ");
    );

   initial begin
      $vcdpluson(   0  , `($self->get_top())->mname`);
      //start_i <= 0; // It's STUPID to use "<=" in an initial block (right!??)
      start_i = 0; // It's STUPID to use "<=" in an initial block (right!??)
   end

   always @(negedge rst_n_i) begin
      start_i = 1;
      @(posedge clk_i) begin start_i = 0; end
   end
   

endmodule

/////////////////////////////////////////////////////////////////////////////////
// MIT License
// 
// Copyright (c) 2013 Stephen E. Richardson and Stanford University
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
// PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-
// TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// 
// For more information please contact
// Stephen E. Richardson  steveri@stanford.edu (Stanford University)
// Prof. Mark Horowitz   horowitz@stanford.edu (Stanford University)
/////////////////////////////////////////////////////////////////////////////////
