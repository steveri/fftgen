//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /nobackup/steveri/github/fftgen/rtl/swizzle.vp
//  Source template: swizzle
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter n_fft_points 	= 8
// Parameter n_butterfly_units 	= 1
// Parameter swizzle_algorithm 	= round7
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// Copyright 2013, all rights reserved.
// See below (end of file) for extended copyright information.
//
/* *****************************************************************************
 * Description:
 * ------------
 * Given FFT of size n_fft_points, and given n_butterfly_units, assume four
 * single-ported SRAM banks for each butterfly unit and map input address
 * addr_i to non-conflicting output address row "rnum_o" in bank "bnum_o".
 * 
 * Refer to equation 5 of:
 * Takala, J.H.; Jarvinen, T.S.; Sorokin, H.T.; , "Conflict-free
 * parallel memory access scheme for FFT processors," Circuits and
 * Systems, 2003. ISCAS '03. Proceedings of the 2003 International
 * Symposium on , vol.4, no., pp. IV-524- IV-527 vol.4, 25-28 May 2003
 *
 */

// ---------------- Begin default Genesis2 parameter summary ----------------
//
// n_butterfly_units (_GENESIS2_INHERITANCE_PRIORITY_) = 1
//
// n_fft_points (_GENESIS2_INHERITANCE_PRIORITY_) = 8
//
// swizzle_algorithm (_GENESIS2_INHERITANCE_PRIORITY_) = round7
//
// ---------------- End default Genesis2 parameter summary ----------------

////////////////////////////////////////////////////////////////////////
// module swizzle_unq1
//
// Usage: swizzle(n_butterfly_units, n_fft_points), where
//
//   n_butterfly_units is any power of two, but usually 1, 2 or 4 ish
//   n_fft_points can be any power of two greater than 8;
//
// Given FFT of size n_fft_points, and given n_butterfly_units, assume four
// single-ported SRAM banks for each butterfly unit and map input address
// addr_i to non-conflicting output address row "rnum_o" in bank "bnum_o".

// Parameters:
//     n_butterfly_units         (1) Number of butterfly units.
//     swizzle_algorithm    (round7) round7 is the only one that works w new scheduler(!)
//     n_fft_points              (8) Number of complex data values to process.
//
// Derived values:

module swizzle_unq1
  (
   input  logic [2:0] addr_i,
   output logic [0:0] rnum_o,
   output logic [1:0] bnum_o
   );

   // npoints=8, nbanks=4
// swizzler algorithm 'round7'

   assign rnum_o = addr_i[2:2];

   assign bnum_o[0] = addr_i[0] ^ addr_i[2];
   assign bnum_o[1] = addr_i[1];


   //Uncomment and tweak for a nice check of the alg as it runs.
   //always @(addr_i) begin
   //   $display("b1=%1d (a0,a1,a3)=(%1d,%1d,%1d)", bnum_o[1], addr_i[0], addr_i[1], addr_i[3]);
   //   $display("b0=%1d (a0,a2)=(%1d,%1d)",        bnum_o[0], addr_i[0], addr_i[2]);
   //end

endmodule




//////////////////////////////////////////////////////////////////////////////
// Copyright Stephen Richardson and Stanford University.  All rights reserved.
//              Exclusively Licensed by Chip Genesis Inc.
//
// The code, the algorithm, or any part of it is not to be copied/reproduced.
// The code, the algorithm, or results from running this code may not be used
// for any commercial use unless legally licensed.
//
// For more information please contact
//   Ofer Shacham (Stanford Univ./Chip Genesis)   shacham@alumni.stanford.edu
//   Professor Mark Horowitz (Stanford Univ.)     horowitz@stanford.edu
//
// Genesis2 is patent pending. For information regarding the patent please
// contact the Stanford Technology Licensing Office.
///////////////////////////////////////////////////////////////////////////////
