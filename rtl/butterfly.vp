// Copyright 2013, all rights reserved.
// See below (end of file) for extended copyright information.
//
//;# push (@INC, "./rtl"); # Now this happens in "Makefile.local"
//; require fftgen;        # log2(), iterate()
//;
//; ########################################################################
//; # PARAMETERS cause default Genesis output to .v file
//; ########################################################################
// ---------------- Begin default Genesis2 parameter summary ----------------
//;
//; my $op_width = parameter
//;    (Name=>'op_width', Val=>64,
//;     Doc=>'E.g. 64 (bits) for 32b each complex real+imaginary');
//;
//; my $op_type = parameter
//;    (Name=>'op_type', Val=>"complex float",
//;     List=>["fix", "float", "complex fix", "complex float", "TEST0", "TEST1", "TEST2", "TEST3", "TEST4", "TEST5"],
//;     Doc=>'fix=fixed-point, float=floating-point');
//; 
//; ########################################################################
//;
// ---------------- End default Genesis2 parameter summary ----------------

//; # op_width overrides
//; my $test_mode = $op_type; # BUG/TOD/FIXME SHOULD NOT NEED!
//; if ($test_mode eq "TEST0") { $op_width = 32; }
//; if ($test_mode eq "TEST1") { $op_width = 64; }
//; if ($test_mode eq "TEST2") { $op_width = 64; }
//; if ($test_mode eq "TEST3") { $op_width = 64; }
//; if ($test_mode eq "TEST4") { $op_width = 64; }
//; if ($test_mode eq "TEST5") { $op_width = 64; }

////////////////////////////////////////////////////////////////////////
// module `mname`
//
// Usage: butterfly(op_width, op_type)
//
//   op_width is total width of each operand (e.g. 64b for 32b each real + imaginary)
//   op_type is "float", "fix", "complex float", "complex fix", "TEST0", "TEST1", ...

module `mname`
    (
     input logic fftclk,
     input logic ready,

     input logic [`$op_width-1`:0] in1,
     input logic [`$op_width-1`:0] in2,
 
     input logic [`$op_width/2-1`:0] twc, // twiddle (cos)
     input logic [`$op_width/2-1`:0] tws, // twiddle (sin)

     output logic [`$op_width-1`:0] out1,
     output logic [`$op_width-1`:0] out2
    );

   //; my $real="63:32"; # Real
   //; my $imag="31: 0"; # Imaginary

   //; if ($op_type eq "TEST0") {  # Assume 32-bit integer(!)
   assign out1 = in1 + in2;
   assign out2 = in1 + in2;
   //; }
   //; elsif ($op_type eq "TEST1") {     # complex integer add
   assign out1[`$real`] = in1[`$real`];                 // Doesn't change, always == 1
   assign out1[`$imag`] = in1[`$real`] + in1[`$imag`];  // Maybe counts 0, 1, 2, 3

   assign out2[`$real`] = in2[`$real`];                 // Doesn't change, always == 1
   assign out2[`$imag`] = in2[`$real`] + in2[`$imag`];  // Maybe counts 0, 1, 2, 3
   //; }
   //; elsif ($op_type eq "TEST2") {     # complex integer mul
   assign out1[`$real`] = in1[`$real`];                 // Doesn't change, always == 2
   assign out1[`$imag`] = in1[`$real`] * in1[`$imag`];  // Maybe counts 1, 2, 4, 8

   assign out2[`$real`] = in2[`$real`];                 // Doesn't change, always == 1
   assign out2[`$imag`] = in2[`$real`] * in2[`$imag`];  // Maybe counts 1, 2, 4, 8
   //; }
   //; elsif ($op_type eq "TEST3") {     # complex float mul
   logic [7:0] status1;
   logic [7:0] status2;

   assign out1[`$real`] = in1[`$real`];                 // Doesn't change, always == 1
   assign out2[`$real`] = in2[`$real`];                 // Doesn't change, always == 1

   // out1[`$imag`] = in1[`$real`] * in1[`$imag`];
   //; my $spmult_t1 = generate('fpu', 'spmult_t1', op=>"mul");
   `$spmult_t1->instantiate` (.a(in1[`$real`]), .b(in1[`$imag`]), .z(out1[`$imag`]));

   // out2[`$imag`] = in2[`$real`] * in2[`$imag`];
   //; my $spmult_t2 = generate('fpu', 'spmult_t2', op=>"mul");
   `$spmult_t2->instantiate` (.a(in2[`$real`]), .b(in2[`$imag`]), .z(out2[`$imag`]));

   //; }
   //; elsif ($op_type eq "TEST4") {     # twiddles only
      assign out1[`$imag`] = twc;     // twiddle_cos
      assign out2[`$imag`] = tws;     // twiddle_sin

   //; }
   //;##############################################################################
   //; elsif ($op_type eq "TEST5") {     # complex float mul

   logic [`$op_width/2-1`:0] t1;
   logic [`$op_width/2-1`:0] t1a;
   logic [`$op_width/2-1`:0] t1b;
   
   logic [`$op_width/2-1`:0] t2;
   logic [`$op_width/2-1`:0] t2a;
   logic [`$op_width/2-1`:0] t2b;

   logic [7:0] status_t1;
   logic [7:0] status_t1a;
   logic [7:0] status_t1b;

   logic [7:0] status_t2;
   logic [7:0] status_t2a;
   logic [7:0] status_t2b;

   logic [7:0] status_o1r;
   logic [7:0] status_o1i;
   logic [7:0] status_o2r;
   logic [7:0] status_o2i;

   //; my $add_op = "1'b0"; my $sub_op = "1'b1";

   ////////////////////////////////////////////////////////////////////////
   // $t1 = $c * $in2_real - $s * $in2_imag
     // $t1 = $t1a - $t1b
     // $t1a = $c * $in2_real
     // $t1b = $s * $in2_imag

     //; my $spsub_t1 = generate('fpu', 'spsub_t1', op=>'sub');
     //; my $spmult_t1a = generate('fpu', 'spmult_t1a', op=>"mul");
     //; my $spmult_t1b = generate('fpu', 'spmult_t1b', op=>'mul');

     `$spsub_t1->instantiate` (.a(t1a), .b(t1b), .z(t1));
     `$spmult_t1a->instantiate` (.a(twc), .b(in2[`$real`]), .z(t1a));
     `$spmult_t1b->instantiate` (.a(tws), .b(in2[`$imag`]), .z(t1b));

   ////////////////////////////////////////////////////////////////////////
   // $t2 = $s * $in2_real + $c * $in2_imag;
     // $t2  = $t2a + $t2b;
     // $t2a = $s * $in2_real;
     // $t2b = $c * $in2_imag;

     //; my $spadd_t2 = generate('fpu', 'spadd_t2', op=>'add');
     //; my $spmult_t2a = generate('fpu', 'spmult_t2a', op=>'mul');
     //; my $spmult_t2b = generate('fpu', 'spmult_t2b', op=>'mul');

     `$spadd_t2->instantiate` (.a(t2a), .b(t2b), .z(t2));
     `$spmult_t2a->instantiate` (.a(tws), .b(in2[`$real`]), .z(t2a));
     `$spmult_t2b->instantiate` (.a(twc), .b(in2[`$imag`]), .z(t2b));

   ////////////////////////////////////////////////////////////////////////

     // $out1_real = $in1_real + $t1;
     // $out1_imag = $in1_imag + $t2;
     // $out2_real = $in1_real - $t1;
     // $out2_imag = $in1_imag - $t2;

     //; my $spadd_o1r = generate('fpu', 'spadd_o1r', op=>'add');
     //; my $spadd_o1i = generate('fpu', 'spadd_o1i', op=>'add');
     //; my $spsub_o2r = generate('fpu', 'spsub_o2r', op=>'sub');
     //; my $spsub_o2i = generate('fpu', 'spsub_o2i', op=>'sub');

     `$spadd_o1r->instantiate` (.a(in1[`$real`]), .b(t1), .z(out1[`$real`]));
     `$spadd_o1i->instantiate` (.a(in1[`$imag`]), .b(t2), .z(out1[`$imag`]));


     // fpu_unq1  spsub_o2r (.a(in1[63:32]), .b(t1), .z(out2[63:32]));

     `$spsub_o2r->instantiate` (.a(in1[`$real`]), .b(t1), .z(out2[`$real`]));



     `$spsub_o2i->instantiate` (.a(in1[`$imag`]), .b(t2), .z(out2[`$imag`]));


   ////////////////////////////////////////////////////////////////////////
   //; sub sr{ my $s = shift; return "\$bitstoshortreal(${s})"; }
   //; sub r { my $s = shift; return sr("${s}[$real]"); }
   //; sub i { my $s = shift; return sr("${s}[$imag]"); }
   //; sub ri{ my $s = shift; return r($s).", ".i($s); }

   always @(fftclk) if (ready) begin

      #2
      $display("%m t5 ------------------------");
      $display("%m t5 %5d: in1(r,i)= (%9.6f,%9.6f)", $time, `ri("in1")`);
      $display("%m t5 %5d: in1(r,i)= ( %08X, %08X)",   $time, in1[`$real`], in1[`$imag`]);
      $display("%m t5 %5d: in2(r,i)= (%9.6f,%9.6f)", $time, `ri("in2")`);
      $display("%m t5");
      $display("%m t5 %5d: t1  = %9.6f (%08X)",     $time, `sr("t1")`,  t1);
      $display("%m t5 %5d: t1a = %9.6f (%08X)",     $time, `sr("t1a")`, t1a);
      $display("%m t5 %5d: t1b = %9.6f (%08X)",     $time, `sr("t1b")`, t1b);
      $display("%m t5");
      $display("%m t5 %5d: t2  = %9.6f",     $time, `sr("t2")`);
      $display("%m t5 %5d: t2a = %9.6f",     $time, `sr("t2a")`);
      $display("%m t5 %5d: t2b = %9.6f",     $time, `sr("t2b")`);
      $display("%m t5");

      $display("%m t5 %5d: out1(r,i)= (in1_real+t1, in1_imag+t2) = (%9.6f,%9.6f)", $time, `ri("out1")`);
      $display("%m t5 %5d: out2(r,i)= (in1_real-t1, in1_imag-t2) = (%9.6f,%9.6f)", $time, `ri("out2")`);


      $display("%m t5 %5d: in1_real=%9.6f(%08X) out2_real=%9.6f(%08X)", 
                    $time, 
                    $bitstoshortreal(in1[63:32]), in1[63:32], 
                    $bitstoshortreal(out2[63:32]), out2[63:32]);




      $display("%m t5 ------------------------");
   end


   //; }

endmodule
//////////////////////////////////////////////////////////////////////////////
// Copyright Stephen Richardson and Stanford University.  All rights reserved.
//              Exclusively Licensed by Chip Genesis Inc.
//
// The code, the algorithm, or any part of it is not to be copied/reproduced.
// The code, the algorithm, or results from running this code may not be used
// for any commercial use unless legally licensed.
//
// For more information please contact
//   Ofer Shacham (Stanford Univ./Chip Genesis)   shacham@alumni.stanford.edu
//   Professor Mark Horowitz (Stanford Univ.)     horowitz@stanford.edu
//
// Genesis2 is patent pending. For information regarding the patent please
// contact the Stanford Technology Licensing Office.
///////////////////////////////////////////////////////////////////////////////
