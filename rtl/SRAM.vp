//;# push (@INC, "./rtl"); # Now this happens in "Makefile.local"
//; require fftgen;        # log2()
//;
// ---------------- Begin default Genesis2 parameter summary ----------------
//
//; # parameter() calls send default Genesis output to top of .v file
//;
//; my $nwords = parameter
//;    (Name=>'nwords', Val=>16, #Min=>1,
//;     Doc=>'Number of words in SRAM.');
//;
//; my $SRAM_TYPE = parameter
//;    (Name=>'SRAM_TYPE', Val=>"1PORT_DBLPUMP",
//;     List=>["TRUE_1PORT", "TRUE_2PORT", "1PORT_DBLPUMP"],
//;     Doc=>'What kind of SRAM should the FFT use?');
//;
//; my $data_width = parameter
//;    (Name=>'data_width', Val=>32,
//;     Doc=>'E.g. 64 (bits) for 32b each complex real+imaginary');
//;
//; my $test_mode = parameter
//;    (Name=>'test_mode', Val=>"TEST0",
//;     List=>["TEST0", "TEST1", "TEST2", "TEST3", "TEST4", "TEST5"],
//;     Doc=>'TEST0: int add; TEST1: complex int add; TEST2: complex int mul; TEST3: complex fp mul');
//;
// ---------------- End default Genesis2 parameter summary ----------------

////////////////////////////////////////////////////////////////////////
// module `mname`
//
// Usage: SRAM(n_words), where
//
//   nwords is the number of (32-bit) words in the SRAM.
   
//; if ($nwords < 1) { $nwords = 1; }    # This can happen, never mind why.
//; my $nrows = $nwords;                 # Number of rows (words) in the SRAM
//; my $rwidth = fftgen::log2($nrows);   # Number of bits required to address all the rows.
//; my $rbits = ($rwidth-1).":0";
//;
//; if ($test_mode eq "TEST0") {
//;    $data_width = 32;
// WARNING test_mode "`$test_mode`" is setting data_width to `$data_width`
//; }
//;
//; if ($test_mode =~ /^TEST[1-9]$/) {  # TEST1, TEST2, TEST3, TEST4, TEST5, ...
//;    $data_width = 64;
// WARNING test_mode "`$test_mode`" is setting data_width to `$data_width`
//; }

module `mname`
(clk_i, ez_i, wz_i, addr_i, rd_data_o, wr_data_i);

   input  logic clk_i;
   input  logic ez_i;             // Active low chip select
   input  logic wz_i;             // Active low write control
   input  logic [`$rbits`] addr_i;     // Address bus

   output logic [`$data_width-1`:0] rd_data_o; // Read data OUT.
   input  logic [`$data_width-1`:0] wr_data_i; // Write data IN.

   reg [`$data_width-1`:0] mem[0:`$nrows-1`];           // memory cells

   integer           i;
   
   //; my $real="63:32"; # Real
   //; my $imag="31: 0"; # Imaginary
   //;
   //; if ($test_mode eq "TEST1") {
   //; # WARNING: SRAM.vp: Test mode `$test_mode` not supported.
   initial begin
      for (i=0; i < `$nrows`; i = i + 1) begin
         mem[i][`$real`] = 1;
         mem[i][`$imag`] = 0;
      end

   end
   //; } elsif ($test_mode =~ /^TEST2$/) {
   //;#    initialize 64-bit data to complex (2,1)
   //;#    butterfly reads (a,b) writes (a, a*b)
   //;#    see if b counts 1, 2, 4, 8, 16
   initial begin
      for (i=0; i < `$nrows`; i = i + 1) begin
         mem[i][`$real`] = 2;
         mem[i][`$imag`] = 1;
      end

   end
   //; } elsif ($test_mode =~ /^TEST3$/) {
    //;# initialize 64-bit data to complex float (0.5, 1.0)
    //;# butterfly reads (a,b) writes (a, a*b)
    //;# see if b counts 1.0, 0.5, 0.25, 0.125...
   initial begin
      for (i=0; i < `$nrows`; i = i + 1) begin
         mem[i][`$real`] = $shortrealtobits(0.5);
         mem[i][`$imag`] = $shortrealtobits(1.0);
      end

   end
   //; } elsif ($test_mode =~ /^TEST4$/) {
   //;# initialize 64-bit data to complex float (0.5, 1.0)
   //;# butterfly reads (a,b) writes (a, a*b)
   //;# see if b counts 1.0, 0.5, 0.25, 0.125...
   initial begin

      // @ar = (1, 1, 1, 1,  0, 0, 0, 0);
      // @ai = (0, 0, 0, 0,  0, 0, 0, 0);

      for (i=0; i < `$nrows`; i = i + 1) begin
         mem[i][`$real`] = $shortrealtobits(0.0);
         mem[i][`$imag`] = $shortrealtobits(0.0);
      end
      for (i=0; i < `$nrows/2`; i = i + 1) begin
         mem[i][`$real`] = $shortrealtobits(1.0);
      end

   end
   //;########################################################
   //; } elsif ($test_mode =~ /^TEST5$/) {
   //;    # TEST5 data gets initialized in top_fft!                 
   //;########################################################
   //; } elsif ($test_mode =~ /^TEST[^0]$/) {
   WARNING: SRAM.vp: Test mode `$test_mode` not supported.
   //;########################################################
   //; } else {
   initial begin
      // BUG/FIXME/TODO what's this???
      for (i=0; i < `$nrows`; i = i + 1) mem[i] = 1;
   end
   //; }
   //;
   //; # For debugging
   //; sub sr{ my $s = shift; return "\$bitstoshortreal(${s})"; }
   //; sub r { my $s = shift; return sr("${s}[$real]"); }
   //; sub i { my $s = shift; return sr("${s}[$imag]"); }
   //; sub ri{ my $s = shift; return r($s).", ".i($s); }
   //;
   //; # "SRAM_unq12" => "SRAM012"
   //; my $myname = mname;  $myname =~ /_unq(.*)/;
   //; $myname = sprintf("SRAM%03d", $1-1);
   //;
   //; if ($SRAM_TYPE eq "TRUE_1PORT") {
   // True one-port SRAM cannot read and write at the same time.
   assign rd_data_o = (~ez_i & wz_i) ? mem[addr_i] : 'x;  // READ TRUE_1PORT
   //; }
   //;
   // True 2-port SRAM *can* read and write at the same time.
   //; if ($SRAM_TYPE eq "TRUE_2PORT") {
   assign rd_data_o = ez_i ? 'x : mem[addr_i];            // READ TRUE_2PORT
   //; }
   //;
   always @(negedge clk_i) begin
      if (~ez_i & wz_i) begin            

         // Double-pump SRAM reads and writes on alternate clock edges.
         //; if ($SRAM_TYPE eq "1PORT_DBLPUMP") {
         rd_data_o = mem[addr_i];                         // READ 1PORT_DBLPUMP
         //; }
         //;
         // READ INFO (historical)
         $display("%m %1d: ez_i=%1d and wz_i=%1d", $time, ez_i, wz_i);
         $display("%m %1d: Reading rd_data_o mem[%1d] <= %16x", $time, addr_i, rd_data_o);
         $display("`$myname` t5 %5d: Read(f) wr_data_i mem[%1d] <= (%9.6f,%9.6f)", $time, addr_i, `ri("rd_data_o")`);
         $display("");
      end
   end

   always @(posedge clk_i) begin
      if (~ez_i & ~wz_i) begin // WRITE
         mem[addr_i] = wr_data_i;
         $display("%m %1d: ez_i=%1d and wz_i=%1d", $time, ez_i, wz_i);
         $display("%m %1d: Wrote   wr_data_i mem[%1d] <= %16x", $time, addr_i, wr_data_i);
         $display("`$myname` t5 %5d: Wrote(f) wr_data_i mem[%1d] <= (%9.6f,%9.6f)", $time, addr_i, `ri("wr_data_i")`);
         $display("");
      end
   end

endmodule

//;########################################################################
//;#// RAM Model
//;#//
//;#// +-----------------------------+
//;#// |    Copyright 1996 DOULOS    |
//;#// |       Library: Memory       |
//;#// |   designer : John Aynsley   |
//;#// +-----------------------------+
//;#
//;#module RamChip (Address, Data, CS, WE, OE);
//;#
//;#parameter AddressSize = 1;
//;#parameter WordSize = 1;
//;#
//;#input [AddressSize-1:0] Address;
//;#inout [WordSize-1:0] Data;
//;#input CS, WE, OE;
//;#
//;#reg [WordSize-1:0] Mem [0:1<<AddressSize];
//;#
//;#assign Data = (!CS && !OE) ? Mem[Address] : {WordSize{1'bz}};
//;#
//;#always @(CS or WE)
//;#  if (!CS && !WE)
//;#    Mem[Address] = Data;
//;#
//;#always @(WE or OE)
//;#  if (!WE && !OE)
//;#    $display("Operational error in RamChip: OE and WE both active");
//;#
//;#endmodule // RamChip
//;#
