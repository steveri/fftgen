/* *****************************************************************************
 * Description:
 * ------------
 * Given FFT of size n_fft_points, and given n_butterfly_units, assume four
 * single-ported SRAM banks for each butterfly unit and map input address
 * addr_i to non-conflicting output address row "rnum_o" in bank "bnum_o".
 * 
 * Refer to equation 5 of:
 * Takala, J.H.; Jarvinen, T.S.; Sorokin, H.T.; , "Conflict-free
 * parallel memory access scheme for FFT processors," Circuits and
 * Systems, 2003. ISCAS '03. Proceedings of the 2003 International
 * Symposium on , vol.4, no., pp. IV-524- IV-527 vol.4, 25-28 May 2003
 *
 */

//;# push (@INC, "./rtl"); # Now this happens in "Makefile.local"
//; require fftgen;        # log2(), iterate()
//;
// ---------------- Begin default Genesis2 parameter summary ----------------
//
//; # parameter() calls send default Genesis output to top of .v file
//;
//; my $nunits = parameter
//;    (Name=>'n_butterfly_units', Val=>1,
//;     Doc=>'Number of butterfly units.');
//; 
//; my $npoints = parameter
//;    (Name=>'n_fft_points', Val=>32,
//;     Doc=>'Number of complex data values to process.');
//;
//; ########################################################################
//;
// ---------------- End default Genesis2 parameter summary ----------------

////////////////////////////////////////////////////////////////////////
// module `mname`
//
// Usage: swizzle(n_butterfly_units, n_fft_points), where
//
//   n_butterfly_units is any power of two, but usually 1, 2 or 4 ish
//   n_fft_points can be any power of two greater than 8;
//
// Given FFT of size n_fft_points, and given n_butterfly_units, assume four
// single-ported SRAM banks for each butterfly unit and map input address
// addr_i to non-conflicting output address row "rnum_o" in bank "bnum_o".

//;##############################################################################
// Parameters:
//; foreach my $p (@{$self->{ParametersList}}) {
//;     my $val = $self->{Parameters}->{$p}->{Val};
//;     my $doc = $self->{Parameters}->{$p}->{Doc};
//;     printf("//     %-20s %8s %s\n", $p, "($val)", $doc);
//; }
//
//;##############################################################################
// Derived values:
//; 
//; my $nbanks = 4*$nunits;
//; my $awidth = fftgen::log2($npoints);
//; my $bwidth = fftgen::log2($nbanks);
//; my $rwidth = fftgen::log2($npoints/$nbanks);

module `mname`
  (
   input  logic [`$awidth-1`:0] addr_i,
   output logic [`$rwidth-1`:0] rnum_o,
   output logic [`$bwidth-1`:0] bnum_o
   );

   //; print "   // npoints=$npoints, nbanks=$nbanks\n";
   //; swizzle($npoints, $nbanks);

   //Uncomment and tweak for a nice check of the alg as it runs.
   //always @(addr_i) begin
   //   $display("b1=%1d (a0,a1,a3)=(%1d,%1d,%1d)", bnum_o[1], addr_i[0], addr_i[1], addr_i[3]);
   //   $display("b0=%1d (a0,a2)=(%1d,%1d)",        bnum_o[0], addr_i[0], addr_i[2]);
   //end

endmodule

//; ##############################################################################
//; # Local subroutines.
//; #
//; sub swizzle {
//;     # swizzle($N, $Q) => prints verilog for calculating rnum, bnum
//;     # FIXME/TODO cite takala paper.
//; 
//;     my $N = shift;    # N = number of elements in FFT array
//;     my $n = fftgen::log2($N); # n = log2(N)
//; 
//;     my $Q = shift;    # Q = number of memory modules
//;     my $q = fftgen::log2($Q); # q = log2(Q)
//; 
//;     # nrow bits = n - q, i.e.
//;     # nrows = log2(N) - log2(Q), i.e.
//;     #     1024 points spread over four memory banks => (10-2) = eight bits (256 rows/bank)
//;     #       32 points spread over four memory banks => ( 5-2) = three bits (8 rows/bank)
//;     #       16 points spread over four memory banks => ( 4-2) = two bits (4 rows/bank)
//;     #
//;     # rownum = address >> q
//;     #     1024 points spread over four memory banks => q=2 => top eight bits of address
//;     #       32 points spread over four memory banks => q=2 => top three bits of address
//;     #       16 points spread over four memory banks => q=2 => top two bits of address
//; 
//;     # "assign rnum_o = (addr_i >> 2);" Causes a lint error:
//;     #         Lint-[CAWM-L] Width mismatch
//;     #         genesis_verif/swizzle_unq1.v, 87
//;     #           Continuous assignment width mismatch
//;     #           1 bits (lhs) versus 3 bits (rhs).
//;     #           Source info: assign rnum_o = (addr_i >> 2);  
//;     # 
//;     # Instead, do "assign rnum_o = addr_i[5:2]"
//;     
//;     # For rownum, generate "addri[$abit:$q]" or, if $abit<$q, simply always use "1'b0".
//;     my $abit = $awidth-1;
//;     my $rownum = ($abit < $q) ? "1'b0" : sprintf("addr_i[%d:%d]", $abit, $q);
//;
//;     print "\n";
//;     printf("   assign rnum_o = $rownum;\n");
//;     print "\n";
//; 
//;     # Swizzle up the lower q bits
//;     # for (my $i = 0; $i < $q; $i++) {
//;     for (my $i = ($q-1); $i >= 0; $i--) {
//;         #print "// i=$i n=$n q=$q\n";
//;         my $nmodq = $n % $q;
//;         my $gcd = gcd($q, $nmodq);  # Could alternatively use recursive "gcdr"
//; 
//;         my $unfloored_thingy = ($n + $q - $gcd - $i - 1) / $q; #print "// u=$unfloored_thingy\n";
//;         my $floored_thingy = int($unfloored_thingy);           #print "// f=$floored_thingy\n";
//; 
//;         my @bits = ();
//;         for (my $j=0; $j <= $floored_thingy; $j++) {
//;             my $jqi = $j * $q + $i;    #print "// jqi=$jqi\n";
//;             my $jqi_mod_n = $jqi % $n; #print "// jqi_mod_n=$jqi_mod_n\n";
//;             push(@bits, $jqi_mod_n);
//;         }
//; 
//; # Here's a fun hack!  (Didn't need after fixed a problem with the verilog test file).
//; #        if (($n==4) && ($q==2)) {
//; #            if ($i==0) { @bits=(0,2); }
//; #            if ($i==1) { @bits=(0,1,3); }
//; #        }
//; 
//;         my @bitstrings = ();
//;         my @sortedbits = sort { $a <=> $b } @bits;  # !!??$# sorts in descending numeric order !!?#%
//;         foreach my $b (@sortedbits) { push(@bitstrings, "addr_i[$b]"); }
//;         printf("   assign bnum_o[$i] = %s;\n", join(" ^ ", @bitstrings));
//;     }
//;     print "\n";
//; }
//; 
//; sub gcd {
//;     # Find greatest common denominator of a and b
//;     my $a = shift; my $b = shift;
//;     if ($a == 0) { return $b; }
//;     if ($b == 0) { return $a; }
//;     for (my $i = $a; $i > 0; $i--) {
//;         if (
//;             (($a % $i) == 0) &&
//;             (($b % $i) == 0)
//;             ) {
//;             return $i;
//;         }
//;     }
//; }
//; 
//; 
//; sub gcdr {
//;     # Find greatest common denominator of a and b
//;     my $a = shift; my $b = shift;
//;     if ($a == 0) { return $b; }
//;     if ($b == 0) { return $a; }
//;     if ($a > $b) {
//;         return gcdr($a % $b, $b);
//;     } else {
//;         return gcdr($a, $b % $a);
//;     }
//; }
